<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Business Chat App</title>
  <link rel="stylesheet" href="styles.css?v=2" />
  <link rel="stylesheet" href="whatsapp-ui.css?v=2" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;600;700&amp;display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
</head>
<body class="theme-default">

  <header class="site-header">
    <div class="container header-inner">
      <h1 class="logo">GENZES CHATS</h1>
      <nav class="nav">
        <button id="btn-logout" class="btn btn-danger" onclick="logout()">
          <span class="btn-icon">üö™</span>
          <span>Logout</span>
        </button>
      </nav>
    </div>
  </header>

  <main class="container">

    <!-- Auth panel removed - using dedicated auth.html page -->

    <!-- App Panel -->
    <div id="appPanel" class="app-container hidden">
      <div class="app-header">
        <button id="backBtn" class="icon-btn" onclick="goToHome()" title="Back" style="display: none;">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
          </svg>
        </button>
        <h1 class="app-title">üí¨ YUVRAJ CHAT COMMUNITY</h1>
        <div class="header-actions">
          <button class="icon-btn" onclick="showSection('notifications')" title="Activity">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
            </svg>
          </button>
          <button class="icon-btn" onclick="showSection('create')" title="Create">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
              <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
            </svg>
          </button>
        </div>
      </div>

      <div class="main-content">
        <!-- Home Section -->
        <div id="homeSection" class="content-section active">
          <!-- All Content Feed (Posts + Reels) -->
          <div class="feed-container">
            <div id="feed"></div>
          </div>
        </div>

        <!-- Search Section -->
        <div id="searchSection" class="content-section">
          <div class="search-header">
            <div class="search-bar">
              <span class="search-icon">üîç</span>
              <input type="text" id="searchQuery" placeholder="Search" />
            </div>
          </div>
          <div class="search-content">
            <div class="recent-searches">
              <h3>Recent</h3>
              <div id="recentSearches"></div>
            </div>
            <div id="searchResults" class="search-results"></div>
          </div>
        </div>

        <!-- Reels Section -->
        <div id="reelsSection" class="content-section">
          <div class="reels-header">
            <h2>Reels</h2>
          </div>
          <div class="reels-container">
            <div id="reelsFeed"></div>
          </div>
        </div>

        <!-- Messages Section -->
        <div id="messagesSection" class="content-section">
          <div class="messages-header">
            <div class="messages-title">
              <h2>Chats</h2>
              <button id="refreshMessages" class="icon-btn" onclick="refreshMessages()" title="Refresh Messages">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="23 4 23 10 17 10"></polyline>
                  <polyline points="1 20 1 14 7 14"></polyline>
                  <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                </svg>
              </button>
            </div>
            <div class="chat-search-container">
              <div class="chat-search-box">
                <svg class="search-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="11" cy="11" r="8"/>
                  <path d="m21 21-4.35-4.35"/>
                </svg>
                <input type="text" id="chatSearchInput" placeholder="Search or start new chat" autocomplete="off">
              </div>
            </div>
          </div>
          <div id="chatSearchResults" class="chat-search-results hidden"></div>
          <div id="chatsList" class="chats-list"></div>
          <div id="chatArea" class="chat-area hidden">
            <div class="chat-header">
              <button id="backToChats" class="back-btn">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
              </button>
              <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
                <div class="chat-avatar" style="width: 32px; height: 32px;">
                  <div class="avatar-placeholder">?</div>
                </div>
                <div>
                  <div class="chat-name" style="font-size: 16px; font-weight: 600; color: #ffffff;">Chat</div>
                  <div style="font-size: 12px; color: #8e8e8e;">Active now</div>
                </div>
              </div>
              <div class="chat-controls">
                <button id="chatThemesBtn" class="theme-btn" title="Chat Themes" onclick="showChatThemes()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1m10.5-3.5L7 7m5 5l4.5 4.5M16.5 7.5L12 12m0 0l-4.5 4.5"/>
                  </svg>
                </button>
                <button id="chatLockBtn" class="lock-btn" title="Chat Lock Settings" onclick="setupChatLock()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <circle cx="12" cy="16" r="1"/>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                  </svg>
                </button>
                <button id="disableChatLockBtn" class="lock-btn" title="Disable Chat Lock" onclick="disableChatLock()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <line x1="8" y1="7" x2="16" y2="7"/>
                    <line x1="6" y1="4" x2="18" y2="20"/>
                  </svg>
                </button>
                <button id="deleteChatBtn" class="block-btn" title="Chat Options" onclick="openChatOptionsModal()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="3,6 5,6 21,6"/>
                    <path d="M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6"/>
                    <line x1="10" y1="11" x2="10" y2="17"/>
                    <line x1="14" y1="11" x2="14" y2="17"/>
                  </svg>
                </button>
                <button id="deleteAllChatsBtn" class="block-btn" title="Delete All Chats" onclick="deleteAllChats()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 6h18"/>
                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                    <line x1="10" y1="11" x2="10" y2="17"/>
                    <line x1="14" y1="11" x2="14" y2="17"/>
                    <circle cx="12" cy="12" r="8" />
                    <line x1="8" y1="8" x2="16" y2="16" />
                    <line x1="16" y1="8" x2="8" y2="16" />
                  </svg>
                </button>
                <button id="blockUserBtn" class="block-btn" title="Block User" onclick="blockCurrentChatUser()">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="M4.93 4.93l14.14 14.14"/>
                  </svg>
                </button>
              </div>
            </div>
            <div id="messages" class="whatsapp-chat"></div>
            <div id="typingIndicator" class="hidden">User is typing...</div>
            <form id="messageForm" class="message-form">
              <button type="button" id="fileUploadBtn" class="file-upload-btn" title="Upload File" onclick="document.getElementById('fileInput').click()">üìé</button>
              <input type="file" id="fileInput" style="display: none;" accept="image/*,video/*" onchange="sendFileMessage(this)" />
              <div style="position: relative; flex: 1;">
                <input type="text" id="messageInput" placeholder="Message..." autocomplete="off" />
                <div id="userSuggestions" class="user-suggestions" style="display: none;"></div>
              </div>
              <button id="scheduleBtn" class="schedule-btn" title="Schedule Message" onclick="openScheduleModal()">‚è∞</button>
              <button type="submit" class="send-btn">Send</button>
            </form>
          </div>
        </div>

  <script src="js/supabaseClient.js"></script>
  <script src="js/auth-check.js"></script>
  <script src="js/features.js"></script>
  <script src="js/app.js?v=3"></script>
  <script src="js/enhanced-features.js"></script>

  <script>
    // Enhanced Load messages function with proper WhatsApp UI structure
    window.loadMessages = async function(partnerId) {
      try {
        const { data: messages, error } = await window.sb
          .from('messages')
          .select('*')
          .or(`and(sender_id.eq.${window.currentUser?.id},receiver_id.eq.${partnerId}),and(sender_id.eq.${partnerId},receiver_id.eq.${window.currentUser?.id})`)
          .order('created_at', { ascending: true });
        
        if (error) throw error;
        
        const messagesContainer = document.getElementById('messages');
        messagesContainer.classList.add( 'whatsapp-chat');
        let html = '';
        
        if (messages?.length) {
          let lastDate = '';
          
          messages.forEach((message, index) => {
            const isMe = message.sender_id === window.currentUser?.id;
            const messageDate = new Date(message.created_at).toDateString();
            const editedText = message.edited ? ' (edited)' : '';
            
            // Add date separator
            if (messageDate !== lastDate) {
              html += `<div class="date-separator">${formatDate(message.created_at)}</div>`;
              lastDate = messageDate;
            }
            
            // Group consecutive messages from same sender
            const prevMessage = messages[index - 1];
            const nextMessage = messages[index + 1];
            const isFirstInGroup = !prevMessage || prevMessage.sender_id !== message.sender_id || messageDate !== new Date(prevMessage.created_at).toDateString();
            const isLastInGroup = !nextMessage || nextMessage.sender_id !== message.sender_id || new Date(nextMessage.created_at).toDateString() !== messageDate;
            
            html += `
              <div class="message-wrapper ${isMe ? 'me' : 'them'}">
                <div class="message ${isFirstInGroup ? 'first' : ''} ${isLastInGroup ? 'last' : ''}" data-message-id="${message.id}">
                  <div class="message-content">
                    ${message.file_url && message.file_url !== 'null' && message.file_url.trim() ? 
                      (message.file_type?.startsWith('image/') ? 
                        `<img src="${message.file_url}" style="max-width: 200px; max-height: 200px; border-radius: 8px; cursor: pointer; display: block; margin-bottom: 4px;" onclick="showImageModal('${message.file_url}', '${message.file_name}')" />` :
                        `<video src="${message.file_url}" controls style="max-width: 200px; max-height: 200px; border-radius: 8px; display: block; margin-bottom: 4px;" />`
                      ) :
                      `<div class="message-text">${message.content}${editedText}</div>`
                    }
                    ${isLastInGroup ? `
                      <div class="message-time">
                        ${formatTime(message.created_at)}
                        ${isMe ? '<span class="message-status">‚úì‚úì</span>' : ''}
                      </div>
                    ` : ''}
                  </div>
                  ${isMe ? `
                    <div class="message-actions">
                      <button onclick="editMessage('${message.id}', '${message.content?.replace(/'/g, "\\'") || ''}')" class="message-action-btn" title="Edit">‚úèÔ∏è</button>
                    </div>
                  ` : ''}
                </div>
              </div>
            `;
          });
        } else {
          html = `
            <div class="empty-messages">
              <div class="empty-icon">üí¨</div>
              <h3>No messages yet</h3>
              <p>Send a message to start the conversation</p>
            </div>
          `;
        }
        
        messagesContainer.innerHTML = html;
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
      } catch (error) {
        console.error('Error loading messages:', error);
        const messagesContainer = document.getElementById('messages');
        if (messagesContainer) {
          messagesContainer.innerHTML = `
            <div class="empty-messages">
              <div class="empty-icon">‚ö†Ô∏è</div>
              <p>Error loading messages</p>
            </div>
          `;
        }
      }
    };
    
    // Format date function for message grouping
    window.formatDate = function(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const messageDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      const diffTime = today - messageDate;
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) return 'Today';
      if (diffDays === 1) return 'Yesterday';
      if (diffDays < 7) return date.toLocaleDateString('en-US', { weekday: 'long' });
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    };
    
    // Format time function
    function formatTime(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const diff = now - date;
      
      if (diff < 60000) return 'now';
      if (diff < 3600000) return Math.floor(diff / 60000) + 'm';
      if (diff < 86400000) return Math.floor(diff / 3600000) + 'h';
      return Math.floor(diff / 86400000) + 'd';
    }
  </script>

        <!-- Create Section -->
        <div id="createSection" class="content-section">
          <div class="section-header" style="padding: 1rem;">
            <h2 style="margin: 0; color: #fff;">GENZES CHATS</h2>
          </div>
          <div class="create-options">
            <div class="create-grid">
              <button id="createPost" class="create-option" onclick="openCreatePostModal()">
                <div class="create-icon">üì∑</div>
                <span>Post</span>
              </button>
              <button id="createReel" class="create-option" onclick="openCreateReelModal()">
                <div class="create-icon">üé¨</div>
                <span>Reel</span>
              </button>
            </div>

          </div>
        </div>

        <!-- Notifications Section -->
        <div id="notificationsSection" class="content-section">
          <div class="section-header" style="padding: 1rem;">
            <h2 style="margin: 0; color: #fff;">GENZES CHATS</h2>
          </div>
          <div class="notifications-container">
            <div class="notifications-tabs">
              <button class="notification-tab active" data-tab="all">All</button>
              <button class="notification-tab" data-tab="likes">Likes</button>
              <button class="notification-tab" data-tab="follows">Follows</button>
              <button class="notification-tab" data-tab="comments">Comments</button>
            </div>
            <div class="notifications-list" id="notificationsList">
              <!-- Notifications will be loaded here -->
            </div>
          </div>
        </div>

        <!-- Profile Section -->
        <div id="profileSection" class="content-section">
          <div class="profile-section">
            <!-- Profile Avatar Section -->
            <div class="profile-avatar-section">
              <div class="profile-avatar-large" id="profileAvatar">
                <span id="profileInitial">U</span>
              </div>
            </div>
            
            <!-- Profile Info Section -->
            <div class="profile-info-section">
              <h2 class="profile-username" id="profileUsername">username</h2>
              <div class="profile-actions">
                <button class="edit-profile-btn" onclick="editProfile()" title="Edit Profile">Edit Profile</button>
                <button id="openSettings" class="settings-btn" title="Settings">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12,8A4,4 0 0,0 8,12A4,4 0 0,0 12,16A4,4 0 0,0 16,12A4,4 0 0,0 12,8M12,2A1.31,1.31 0 0,0 10.69,3.31L10.5,4.5C10.5,4.5 10.5,4.5 10.5,4.5C9.97,4.5 9.46,4.67 9.04,5L8.04,4.32C7.64,4 7.1,4 6.69,4.32L5.81,5.19C5.5,5.5 5.5,6 5.81,6.31L6.5,7C6.17,7.42 6,7.93 6,8.46V8.5L4.69,8.69A1.31,1.31 0 0,0 3.31,10.69V13.31A1.31,1.31 0 0,0 4.69,15.31L6,15.5C6,16.03 6.17,16.54 6.5,16.96L5.81,17.69C5.5,18 5.5,18.5 5.81,18.81L6.69,19.69C7,20 7.5,20 7.81,19.69L8.5,19C8.92,19.33 9.43,19.5 9.96,19.5H10L10.31,20.69A1.31,1.31 0 0,0 12,22A1.31,1.31 0 0,0 13.69,20.69L14,19.5C14.53,19.5 15.04,19.33 15.46,19L16.19,19.69C16.5,20 17,20 17.31,19.69L18.19,18.81C18.5,18.5 18.5,18 18.19,17.69L17.5,17C17.83,16.58 18,16.07 18,15.54V15.5L19.31,15.31A1.31,1.31 0 0,0 20.69,13.31V10.69A1.31,1.31 0 0,0 19.31,8.69L18,8.5C18,7.97 17.83,7.46 17.5,7.04L18.19,6.31C18.5,6 18.5,5.5 18.19,5.19L17.31,4.31C17,4 16.5,4 16.19,4.31L15.5,5C15.08,4.67 14.57,4.5 14.04,4.5H14L13.69,3.31A1.31,1.31 0 0,0 12,2Z"/>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Profile Stats Section -->
            <div class="profile-stats-section">
              <div class="stat" onclick="showPosts()">
                <span class="stat-number" id="postsCount">0</span>
                <span class="stat-label">posts</span>
              </div>
              <div class="stat" onclick="showFollowers()">
                <span class="stat-number" id="followersCount">0</span>
                <span class="stat-label">followers</span>
              </div>
              <div class="stat" onclick="showFollowing()">
                <span class="stat-number" id="followingCount">0</span>
                <span class="stat-label">following</span>
              </div>
            </div>
            
            <!-- Profile Bio Section -->
            <div class="profile-bio-section">
              <div class="profile-fullname" id="profileFullname">Full Name</div>
              <div class="profile-bio-text" id="profileBio">Bio goes here...</div>
              <div class="profile-links" id="profileLinks"></div>
            </div>
          </div>
          

          
          <!-- Profile Tabs -->
          <div class="profile-tabs">
            <button class="profile-tab active" data-tab="posts">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <rect x="3" y="3" width="7" height="7"/>
                <rect x="14" y="3" width="7" height="7"/>
                <rect x="14" y="14" width="7" height="7"/>
                <rect x="3" y="14" width="7" height="7"/>
              </svg>
            </button>
            <button class="profile-tab" data-tab="reels">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z"/>
              </svg>
            </button>
            <button class="profile-tab" data-tab="tagged">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            </button>
          </div>
          
          <!-- Profile Content -->
          <div class="profile-content">
            <div id="postsContent" class="profile-tab-content">
              <div class="loading">Loading posts...</div>
            </div>
            <div id="reelsContent" class="profile-tab-content hidden">
              <div class="loading">Loading reels...</div>
            </div>
            <div id="taggedContent" class="profile-tab-content hidden">
              <div class="no-content">No tagged posts yet</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Bottom Navigation -->
      <div class="bottom-nav">
        <button class="nav-btn active" data-section="home">
          <span class="nav-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
            </svg>
          </span>
          <span class="nav-label">Home</span>
        </button>
        <button class="nav-btn" data-section="search">
          <span class="nav-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
            </svg>
          </span>
          <span class="nav-label">Search</span>
        </button>
        <button class="nav-btn" data-section="reels">
          <span class="nav-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z"/>
            </svg>
          </span>
          <span class="nav-label">Reels</span>
        </button>
        <button class="nav-btn" data-section="messages">
          <span class="nav-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
            </svg>
          </span>
          <span class="nav-label">Messages</span>
        </button>
        <button class="nav-btn" data-section="profile">
          <span class="nav-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
          </span>
          <span class="nav-label">Profile</span>
        </button>
      </div>
    </div>

    <!-- Username setup removed - handled in auth.html -->



    <!-- Modals -->
    <div id="createPostModal" class="modal hidden">
      <div class="modal-backdrop"></div>
      <div class="modal-dialog">
        <div class="modal-header">
          <h3>Create Post</h3>
          <button id="closeCreatePost" class="close-btn">√ó</button>
        </div>
        <form id="createPostForm" class="modal-form">
          <label>Media
            <button type="button" id="btnPickMedia" class="upload-btn">Choose Photo/Video</button>
            <input type="file" id="postImage" accept="image/*,video/*" capture="environment" style="display: none;" />
            <div id="mediaSelected" style="margin-top: 8px; font-size: 0.9em; color: #666;"></div>
          </label>
          <div id="postPreview" class="media-preview"></div>
          <label>Caption
            <textarea id="postCaption" rows="3" placeholder="Write a caption..."></textarea>
          </label>
          <label>Audience
            <select id="postAudience">
              <option value="public">Public</option>
              <option value="followers">Followers only</option>
              <option value="close_friends">Close friends</option>
            </select>
          </label>
          <div class="modal-actions">
            <button type="button" id="cancelCreatePost" class="cancel-btn">Cancel</button>
            <button type="submit" class="save-btn">Post</button>
          </div>
        </form>
      </div>
    </div>



    <div id="createReelModal" class="modal hidden">
      <div class="modal-backdrop"></div>
      <div class="modal-dialog">
        <div class="modal-header">
          <h3>Create Reel</h3>
          <button id="closeCreateReel" class="close-btn">√ó</button>
        </div>
        <form id="createReelForm" class="modal-form">
          <label>Video
            <button type="button" id="btnPickReelVideo" class="upload-btn">Choose Video</button>
            <input type="file" id="reelVideo" accept="video/*" capture="environment" style="display: none;" />
            <div id="reelVideoSelected" style="margin-top: 8px; font-size: 0.9em; color: #666;"></div>
          </label>
          <div id="reelPreview" class="media-preview"></div>
          <label>Caption
            <textarea id="reelCaption" rows="3" placeholder="Write a caption..."></textarea>
          </label>
          <label>Audience
            <select id="reelAudience">
              <option value="public">Public</option>
              <option value="followers">Followers only</option>
              <option value="close_friends">Close friends</option>
            </select>
          </label>
          <div class="modal-actions">
            <button type="button" id="cancelCreateReel" class="cancel-btn">Cancel</button>
            <button type="submit" class="save-btn">Share Reel</button>
          </div>
        </form>
      </div>
    </div>



    <!-- Edit Profile Modal -->
    <div id="editProfileModal" class="modal hidden">
      <div class="modal-backdrop"></div>
      <div class="modal-dialog" style="max-width: 500px; background: #262626; color: #ffffff;">
        <div class="modal-header" style="background: #262626; color: #ffffff; border-bottom: 1px solid #3c3c3c;">
          <h3 style="color: #ffffff; display: flex; align-items: center; gap: 0.5rem;">
            <button onclick="closeEditProfile()" class="back-btn" style="background: none; border: none; color: #ffffff; cursor: pointer; padding: 0.25rem; display: flex; align-items: center; justify-content: center;">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m15 18-6-6 6-6"/>
              </svg>
            </button>
            Edit Profile
          </h3>
          <button onclick="closeEditProfile()" class="close-btn" style="color: #ffffff;">√ó</button>
        </div>
        <form id="editProfileForm" class="modal-form" style="background: #262626; padding: 1.5rem;">
          <!-- Profile Picture Upload -->
          <div class="form-group" style="text-align: center; margin-bottom: 1.5rem;">
            <div class="profile-pic-container" style="position: relative; display: inline-block; margin-bottom: 1rem;">
              <div id="currentProfilePic" class="profile-pic" style="width: 120px; height: 120px; border-radius: 50%; background: #3c3c3c; margin: 0 auto; overflow: hidden; position: relative; cursor: pointer; border: 3px solid #555;" onclick="selectProfilePic()">
                <img id="profilePicPreview" style="width: 100%; height: 100%; object-fit: cover; display: none;" />
                <div id="profilePicPlaceholder" style="display: flex; align-items: center; justify-content: center; height: 100%; color: #ffffff; font-size: 3rem;">üì∑</div>
              </div>
              <button type="button" onclick="selectProfilePic()" class="btn btn-primary" style="margin-top: 0.5rem; font-size: 0.9rem; padding: 0.5rem 1rem; background: linear-gradient(45deg, #405de6, #5851db, #833ab4, #c13584, #e1306c, #fd1d1d); border: none; color: white; border-radius: 6px; cursor: pointer; display: inline-block;">Change Photo</button>
            </div>
            <input type="file" id="profilePicInput" accept="image/*" style="display: none;">
          </div>
          
          <!-- Profile Information -->
          <div class="form-group" style="margin-bottom: 1.5rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #ffffff;">Username</label>
            <input type="text" id="edit_username" placeholder="Username" required style="width: 100%; padding: 0.75rem; border: 1px solid #555; border-radius: 6px; font-size: 16px; background: #3c3c3c; color: #ffffff;">
          </div>
          
          <div class="form-group" style="margin-bottom: 1.5rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #ffffff;">Full Name</label>
            <input type="text" id="edit_fullname" placeholder="Full Name" style="width: 100%; padding: 0.75rem; border: 1px solid #555; border-radius: 6px; font-size: 16px; background: #3c3c3c; color: #ffffff;">
          </div>
          
          <div class="form-group" style="margin-bottom: 1.5rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #ffffff;">Bio</label>
            <textarea id="edit_bio" placeholder="Tell us about yourself..." rows="3" maxlength="150" style="width: 100%; padding: 0.75rem; border: 1px solid #555; border-radius: 6px; font-size: 16px; resize: none; background: #3c3c3c; color: #ffffff;"></textarea>
            <div style="text-align: right; font-size: 0.8rem; color: #aaa; margin-top: 0.25rem;">
              <span id="bioCount">0</span>/150
            </div>
          </div>
          
          <div class="form-group" style="margin-bottom: 1.5rem;">
            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #ffffff;">Website/Links</label>
            <textarea id="edit_links" placeholder="Add your website or social links (one per line)" rows="2" style="width: 100%; padding: 0.75rem; border: 1px solid #555; border-radius: 6px; font-size: 16px; resize: none; background: #3c3c3c; color: #ffffff;"></textarea>
          </div>
          
          <!-- Privacy Settings -->
          <div class="form-group" style="margin-bottom: 1.5rem;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <div>
                <div style="font-weight: 600; color: #ffffff;">Private Account</div>
                <div style="font-size: 0.8rem; color: #aaa;">Only followers can see your posts</div>
              </div>
              <input type="checkbox" id="edit_private" style="width: auto;">
            </div>
          </div>
          
          <div class="form-actions" style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
            <button type="button" onclick="closeEditProfile()" class="btn btn-secondary" style="padding: 0.75rem 1.5rem; background: #6c757d; color: white; border: none; border-radius: 6px; cursor: pointer;">Cancel</button>
            <button type="submit" class="btn btn-primary" style="padding: 0.75rem 1.5rem; background: linear-gradient(45deg, #405de6, #5851db, #833ab4, #c13584, #e1306c, #fd1d1d); color: white; border: none; border-radius: 6px; cursor: pointer;">Save Changes</button>
          </div>
        </form>
      </div>
    </div>

    <div id="settingsModal" class="modal settings-modal hidden">
      <div class="modal-backdrop"></div>
      <div class="modal-dialog">
        <div class="settings-header">
          <h3>Settings</h3>
          <button id="closeSettings" class="close-btn">√ó</button>
        </div>
        <div class="settings-body">
          <div class="settings-item" onclick="showEditProfile()">
            <h4>Edit Profile</h4>
            <p>Change your username, bio, and profile picture</p>
          </div>
          <div class="settings-item" onclick="accountPrivacy()">
            <h4>Account Privacy</h4>
            <p>Manage who can see your content</p>
          </div>
          <div class="settings-item" onclick="setupChatLock()">
            <h4>üîí Chat Lock</h4>
            <p>Secure your messages with a password</p>
          </div>
          <div class="settings-item" onclick="viewBlockedAccounts()">
            <h4>üö´ Blocked Accounts</h4>
            <p>Manage blocked users</p>
          </div>
          <div class="settings-item" onclick="notificationSettings()">
            <h4>üîî Notifications</h4>
            <p>Control your notification preferences</p>
          </div>
          <div class="settings-item" onclick="dataDownload()">
            <h4>üì• Download Data</h4>
            <p>Download a copy of your data</p>
          </div>
          <div class="settings-item" onclick="deleteAllChats()">
            <h4>üí• Delete All Chats</h4>
            <p>Permanently delete all your messages</p>
          </div>
          <div class="settings-item" onclick="disableAccount()">
            <h4>üö´ Disable Account</h4>
            <p>Temporarily disable your account</p>
          </div>
          <div class="settings-item" onclick="logout()">
            <h4>üö™ Logout</h4>
            <p>Sign out of your account</p>
          </div>
        </div>
      </div>
    </div>

  </main>


  <script>
    // Session checking - redirect to auth page if not logged in
    async function checkAuthSession() {
      if (!window.sb) {
        console.log('Supabase not ready, redirecting to auth');
        window.location.href = 'auth.html';
        return;
      }
      
      try {
        const { data: { session }, error } = await window.sb.auth.getSession();
        
        if (error) {
          console.error('Session check error:', error);
          window.location.href = 'auth.html';
          return;
        }
        
        if (!session?.user) {
          console.log('No active session, redirecting to auth');
          window.location.href = 'auth.html';
          return;
        }
        
        console.log('Valid session found:', session.user.email);
        window.currentUser = session.user;
        
        // Ensure profile exists
        await ensureUserProfile(session.user);
        
        // Show app UI
        showAppUI();
        
      } catch (error) {
        console.error('Auth check failed:', error);
        window.location.href = 'auth.html';
      }
    }
    
    // Ensure user profile exists
    async function ensureUserProfile(user) {
      try {
        let { data: profile, error: profileError } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();
        
        if (profileError && profileError.code === 'PGRST116') {
          // Profile doesn't exist, create one
          const username = user.email.split('@')[0] + '_' + Math.random().toString(36).substr(2, 4);
          
          const { data: newProfile, error: createError } = await window.sb
            .from('profiles')
            .insert({
              id: user.id,
              username: username,
              full_name: user.user_metadata?.full_name || '',
              avatar_url: user.user_metadata?.avatar_url || '',
              bio: user.user_metadata?.bio || '',
              links: user.user_metadata?.links || '',
              is_private: false
            })
            .select()
            .single();
          
          if (createError) {
            console.error('Error creating profile:', createError);
          } else {
            profile = newProfile;
            console.log('Profile created:', profile);
          }
        }
        
        if (profile) {
          window.currentUser.profile = profile;
        }
        
        return profile;
      } catch (error) {
        console.error('Error ensuring profile:', error);
        return null;
      }
    }
    
    // Show app UI
    function showAppUI() {
      document.getElementById('appPanel').classList.remove('hidden');
      
      // Load initial data
      loadProfileInfo();
      loadFeed();
      // Reels should only load in reels section
    }
    
    // Story functions removed
    
    // Create post function
    async function createPost(e) {
      e.preventDefault();
      
      if (!window.currentUser) {
        alert('Please log in first');
        return;
      }
      
      const file = document.getElementById('postImage')?.files?.[0];
      const caption = document.getElementById('postCaption')?.value || '';
      
      const btn = e.target.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Posting...';
      
      try {
        let imageUrl = null;
        
        if (file) {
          const reader = new FileReader();
          reader.onload = async (e) => {
            imageUrl = e.target.result;
            
            const { error } = await window.sb.from('posts').insert({
              user_id: window.currentUser.id,
              caption: caption,
              image_url: imageUrl,
              media_type: file.type.startsWith('video/') ? 'video' : 'image',
              audience: document.getElementById('postAudience')?.value || 'public'
            });
            
            if (error) throw error;
            
            document.getElementById('createPostModal').classList.add('hidden');
            document.getElementById('createPostForm').reset();
            document.getElementById('postPreview').innerHTML = '';
            document.getElementById('mediaSelected').textContent = '';
            
            alert('Post created successfully!');
            loadFeed(); // Refresh feed
          };
          reader.readAsDataURL(file);
        } else {
          // Text-only post
          const { error } = await window.sb.from('posts').insert({
            user_id: window.currentUser.id,
            caption: caption,
            audience: document.getElementById('postAudience')?.value || 'public'
          });
          
          if (error) throw error;
          
          document.getElementById('createPostModal').classList.add('hidden');
          document.getElementById('createPostForm').reset();
          
          alert('Post created successfully!');
          loadFeed(); // Refresh feed
        }
        
      } catch (error) {
        console.error('Post creation error:', error);
        alert('Failed to create post');
      } finally {
        btn.disabled = false;
        btn.textContent = 'Post';
      }
    }
    
    // Story creation removed
    
    // Load reels function - only video content
    async function loadReels() {
      try {
        const { data: reels, error } = await window.sb
          .from('posts')
          .select('*')
          .eq('media_type', 'video')  // Only load video posts for reels
          .not('image_url', 'is', null)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const reelsContainer = document.getElementById('reelsFeed');
        if (!reelsContainer) return;
        
        let html = '';
        
        if (reels?.length) {
          for (const reel of reels) {
            // Get user profile
            let user = null;
            try {
              const { data: profile } = await window.sb
                .from('profiles')
                .select('username, avatar_url, full_name')
                .eq('id', reel.user_id)
                .single();
              user = profile;
            } catch (err) {
              console.log('Profile not found for user:', reel.user_id);
            }
            
            // Check if it's a video (reel)
            const isVideo = reel.image_url && (reel.image_url.includes('video') || reel.image_url.startsWith('data:video'));
            
            html += `
              <div class="reel-item" style="margin-bottom: 2rem; background: rgba(255,255,255,0.03); border-radius: 12px; overflow: hidden;">
                <div class="reel-header" style="padding: 1rem; display: flex; align-items: center; gap: 0.75rem;">
                  <div class="reel-avatar" style="width: 40px; height: 40px; border-radius: 50%; overflow: hidden;">
                    ${user?.avatar_url ? 
                      `<img src="${user.avatar_url}" alt="${user.username}" style="width: 100%; height: 100%; object-fit: cover;" />` : 
                      `<div style="width: 100%; height: 100%; background: #e1306c; color: white; display: flex; align-items: center; justify-content: center; font-weight: 600;">${user?.username?.[0]?.toUpperCase() || 'U'}</div>`
                    }
                  </div>
                  <div>
                    <div style="font-weight: 600; color: #ffffff;">${user?.username || 'User'}</div>
                    <div style="font-size: 0.8rem; color: #8e8e8e;">${formatTime(reel.created_at)}</div>
                  </div>
                </div>
                <div class="reel-media" style="position: relative; width: 100%; max-height: 600px; background: #000;">
                  ${isVideo ? 
                    `<video src="${reel.image_url}" controls style="width: 100%; height: auto; max-height: 600px; object-fit: contain;" />` :
                    `<img src="${reel.image_url}" alt="Reel" style="width: 100%; height: auto; max-height: 600px; object-fit: contain;" />`
                  }
                </div>
                ${reel.caption ? `<div class="reel-caption" style="padding: 1rem; color: #ffffff;"><strong>${user?.username || 'User'}</strong> ${reel.caption}</div>` : ''}
                <div class="reel-actions" style="padding: 0 1rem 1rem; display: flex; gap: 1rem;">
                  <button class="reel-action" onclick="toggleLike('${reel.id}')" style="background: none; border: none; color: #ffffff; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                    </svg>
                    Like
                  </button>
                  <button class="reel-action" onclick="showComments('${reel.id}')" style="background: none; border: none; color: #ffffff; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
                    </svg>
                    Comment
                  </button>
                  <button class="reel-action" onclick="sharePost('${reel.id}')" style="background: none; border: none; color: #ffffff; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                      <polyline points="16,6 12,2 8,6"/>
                      <line x1="12" y1="2" x2="12" y2="15"/>
                    </svg>
                    Share
                  </button>
                </div>
              </div>
            `;
          }
        } else {
          html = '<div class="no-content" style="text-align: center; padding: 2rem; color: #8e8e8e;">No reels yet. Create your first reel!</div>';
        }
        
        reelsContainer.innerHTML = html;
        
      } catch (error) {
        console.error('Error loading reels:', error);
        const reelsContainer = document.getElementById('reelsFeed');
        if (reelsContainer) {
          reelsContainer.innerHTML = '<div class="no-content" style="text-align: center; padding: 2rem; color: #8e8e8e;">Error loading reels. Please try again.</div>';
        }
      }
    }
    
    // Stories function removed - no longer needed
    
    // Story viewer removed
    
    // Modal functions
    function openCreatePostModal() {
      document.getElementById('createPostModal').classList.remove('hidden');
    }
    
    function openCreateReelModal() {
      document.getElementById('createReelModal').classList.remove('hidden');
    }
    
    function setupChatLock() {
      const password = prompt('Set a password for chat lock:');
      if (password && password.length >= 4) {
        localStorage.setItem('chatLockPassword', btoa(password));
        localStorage.setItem('chatLockEnabled', 'true');
        localStorage.removeItem('chatLockDisabled');
        document.getElementById('chatLockBtn').style.display = 'none';
        document.getElementById('disableChatLockBtn').style.display = 'block';
        alert('Chat lock enabled! You will need to enter this password to access messages.');
      } else if (password) {
        alert('Password must be at least 4 characters long');
      }
    }

    function disableChatLock() {
      localStorage.removeItem('chatLockPassword');
      localStorage.setItem('chatLockEnabled', 'false');
      localStorage.setItem('chatLockDisabled', 'true');
      document.getElementById('chatLockBtn').style.display = 'block';
      document.getElementById('disableChatLockBtn').style.display = 'none';
      alert('Chat lock disabled permanently. You will no longer be prompted for passwords.');
    }
    
    function checkChatLock() {
      const isDisabled = localStorage.getItem('chatLockDisabled') === 'true';
      if (isDisabled) {
        return true; // Skip password check if disabled
      }
      
      const isEnabled = localStorage.getItem('chatLockEnabled') === 'true';
      const storedPassword = localStorage.getItem('chatLockPassword');
      
      if (isEnabled && storedPassword) {
        const enteredPassword = prompt('Enter chat lock password:');
        if (!enteredPassword || btoa(enteredPassword) !== storedPassword) {
          alert('Incorrect password!');
          return false;
        }
      }
      return true;
    }
    
    // Enhanced Global user search function
    async function searchUsers(query) {
      try {
        let users;
        let error;
        
        if (!query || !query.trim()) {
          // Load all users when no search query (excluding disabled accounts)
          const result = await window.sb
            .from('profiles')
            .select('*')
            .or('is_disabled.is.null,is_disabled.eq.false')
            .order('created_at', { ascending: false })
            .limit(100);
          users = result.data;
          error = result.error;
        } else {
          // Search users by username or full name (excluding disabled accounts)
          const result = await window.sb
            .from('profiles')
            .select('*')
            .or(`username.ilike.%${query.trim()}%,full_name.ilike.%${query.trim()}%`)
            .or('is_disabled.is.null,is_disabled.eq.false')
            .order('username', { ascending: true })
            .limit(50);
          users = result.data;
          error = result.error;
        }
        
        if (error) throw error;
        
        const resultsDiv = document.getElementById('searchResults');
        let html = '';
        
        if (!query || !query.trim()) {
          html += '<div class="all-users-header"><h3>üåç All Users on GENZES CHATS</h3><p>Discover and connect with people from around the world</p></div>';
        } else {
          html += `<div class="search-results-header"><h3>üîç Search Results for "${query}"</h3></div>`;
        }
        
        if (users && users.length > 0) {
          // Get current user's follow status and block status for all users
          let followingIds = [];
          let blockedIds = [];
          if (window.currentUser) {
            try {
              const { data: follows } = await window.sb
                .from('follows')
                .select('followee_id')
                .eq('follower_id', window.currentUser.id)
                .in('followee_id', users.map(u => u.id));
              followingIds = follows?.map(f => f.followee_id) || [];
              
              const { data: blocked } = await window.sb
                .from('blocked_users')
                .select('blocked_id')
                .eq('blocker_id', window.currentUser.id)
                .in('blocked_id', users.map(u => u.id));
              blockedIds = blocked?.map(b => b.blocked_id) || [];
            } catch (err) {
              console.log('Error getting follow/block status:', err);
            }
          }
          
          users.forEach(user => {
            // Skip current user from results
            if (window.currentUser && user.id === window.currentUser.id) return;
            
            const isFollowing = followingIds.includes(user.id);
            const isBlocked = blockedIds.includes(user.id);
            
            html += `
              <div class="user-item" onclick="openEnhancedUserProfile('${user.id}', '${user.username}')">
                <div class="user-avatar">
                  ${user.avatar_url && user.avatar_url.trim() && user.avatar_url !== 'null' ? 
                    `<img src="${user.avatar_url}" alt="${user.username}" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />` : 
                    ''
                  }
                  <span style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; display: ${user.avatar_url && user.avatar_url.trim() && user.avatar_url !== 'null' ? 'none' : 'flex'}; align-items: center; justify-content: center; font-weight: 600; font-size: 1.2rem;">${user.username?.[0]?.toUpperCase() || 'U'}</span>
                </div>
                <div class="user-info">
                  <div class="user-name">@${user.username}</div>
                  <div class="user-fullname">${user.full_name || 'No name provided'}</div>
                  ${user.bio ? `<div class="user-bio">${user.bio.length > 50 ? user.bio.substring(0, 50) + '...' : user.bio}</div>` : ''}
                </div>
                <div class="user-actions">
                  <button class="btn ${isFollowing ? 'btn-accent' : 'btn-primary'}" onclick="event.stopPropagation(); followUser(&quot;${user.id}&quot;)" title="${isFollowing ? 'Unfollow' : 'Follow'} ${user.username}">${isFollowing ? 'Following' : 'Follow'}</button>
                  <button class="btn btn-secondary" onclick="event.stopPropagation(); startDirectMessage('${user.id}', '${user.username}')" title="Message ${user.username}">Message</button>
                  <button class="btn ${isBlocked ? 'btn-success' : 'btn-danger'}" onclick="event.stopPropagation(); blockUser(&quot;${user.id}&quot;)" title="${isBlocked ? 'Unblock' : 'Block'} ${user.username}" style="background: ${isBlocked ? '#28a745' : '#dc3545'}">${isBlocked ? 'Unblock' : 'Block'}</button>
                </div>
              </div>
            `;
          });
        } else {
          if (query && query.trim()) {
            html += '<div class="no-results">‚ùå No users found matching your search</div>';
          } else {
            html += '<div class="no-results">üë• No users found on the platform yet</div>';
          }
        }
        
        resultsDiv.innerHTML = html;
        
      } catch (error) {
        console.error('Search error:', error);
        const resultsDiv = document.getElementById('searchResults');
        resultsDiv.innerHTML = '<div class="error-message">‚ùå Error loading users. Please try again.</div>';
      }
    }
    
    // Load all users initially when search section is opened
    async function loadAllUsers() {
      await searchUsers(''); // Call searchUsers with empty query to load all users
    }
    
    // Post interaction functions
    async function toggleLike(postId) {
      if (!window.currentUser) {
        alert('Please log in to like posts');
        return;
      }
      
      const likeBtn = document.querySelector(`[data-post-id="${postId}"].like-btn`);
      const likesEl = document.getElementById(`likes-${postId}`);
      
      try {
        // Check if already liked
        const { data: existingLike } = await window.sb
          .from('likes')
          .select('*')
          .eq('post_id', postId)
          .eq('user_id', window.currentUser.id)
          .maybeSingle();
        
        if (existingLike) {
          // Unlike
          await window.sb
            .from('likes')
            .delete()
            .eq('post_id', postId)
            .eq('user_id', window.currentUser.id);
          
          // Update UI
          likeBtn.classList.remove('liked');
        } else {
          // Like
          await window.sb
            .from('likes')
            .insert({
              post_id: postId,
              user_id: window.currentUser.id
            });
          
          // Update UI
          likeBtn.classList.add('liked');
        }
        
        // Update likes count
        const { count } = await window.sb
          .from('likes')
          .select('*', { count: 'exact', head: true })
          .eq('post_id', postId);
        
        likesEl.textContent = `${count || 0} ${count === 1 ? 'like' : 'likes'}`;
        

        
      } catch (error) {
        console.error('Error toggling like:', error);
      }
    }
    
    // Show likes popup (Instagram-like)
    async function showLikes(postId) {
      try {
        const { data: likes, error } = await window.sb
          .from('likes')
          .select(`
            *,
            profiles:user_id (username, avatar_url, full_name)
          `)
          .eq('post_id', postId)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        // Create likes modal
        const modal = document.createElement('div');
        modal.className = 'likes-modal';
        modal.innerHTML = `
          <div class="likes-modal-content">
            <div class="likes-modal-header">
              Likes
              <button class="close-modal" onclick="closeLikesModal()">&times;</button>
            </div>
            <div class="likes-modal-body">
              ${likes?.map(like => `
                <div class="user-item">
                  <div class="user-avatar">
                    ${like.profiles?.avatar_url ? 
                      `<img src="${like.profiles.avatar_url}" alt="${like.profiles.username}" />` :
                      (like.profiles?.username?.[0]?.toUpperCase() || 'U')
                    }
                  </div>
                  <div class="user-info">
                    <div class="user-name">${like.profiles?.username || 'User'}</div>
                    <div class="user-fullname">${like.profiles?.full_name || ''}</div>
                  </div>
                </div>
              `).join('') || '<div class="no-content">No likes yet</div>'}
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        modal.id = 'likesModal';
        
        // Close on backdrop click
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeLikesModal();
        });
        
      } catch (error) {
        console.error('Error loading likes:', error);
      }
    }
    
    // Show views popup (Instagram-like)
    async function showViews(postId) {
      try {
        const { data: views, error } = await window.sb
          .from('post_views')
          .select(`
            *,
            profiles:user_id (username, avatar_url, full_name)
          `)
          .eq('post_id', postId)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        // Create views modal
        const modal = document.createElement('div');
        modal.className = 'views-modal';
        modal.innerHTML = `
          <div class="views-modal-content">
            <div class="views-modal-header">
              Views
              <button class="close-modal" onclick="closeViewsModal()">&times;</button>
            </div>
            <div class="views-modal-body">
              ${views?.map(view => `
                <div class="user-item">
                  <div class="user-avatar">
                    ${view.profiles?.avatar_url ? 
                      `<img src="${view.profiles.avatar_url}" alt="${view.profiles.username}" />` :
                      (view.profiles?.username?.[0]?.toUpperCase() || 'U')
                    }
                  </div>
                  <div class="user-info">
                    <div class="user-name">${view.profiles?.username || 'User'}</div>
                    <div class="user-fullname">${view.profiles?.full_name || ''}</div>
                  </div>
                </div>
              `).join('') || '<div class="no-content">No views yet</div>'}
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        modal.id = 'viewsModal';
        
        // Close on backdrop click
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeViewsModal();
        });
        
      } catch (error) {
        console.error('Error loading views:', error);
      }
    }
    
    // Close modals
    function closeLikesModal() {
      const modal = document.getElementById('likesModal');
      if (modal) modal.remove();
    }
    
    function closeViewsModal() {
      const modal = document.getElementById('viewsModal');
      if (modal) modal.remove();
    }
    
    async function toggleSave(postId) {
      if (!window.currentUser) {
        alert('Please log in to save posts');
        return;
      }
      
      // Show save options modal
      const modal = document.createElement('div');
      modal.className = 'modal save-options-modal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeSaveOptions()"></div>
        <div class="modal-dialog">
          <div class="modal-header">
            <h3>Save Options</h3>
            <button onclick="closeSaveOptions()" class="close-btn">√ó</button>
          </div>
          <div class="modal-body">
            <button class="save-option" onclick="saveToCollection('${postId}'); closeSaveOptions();">
              üíæ Save to Collection
            </button>
            <button class="save-option" onclick="saveToDevice('${postId}'); closeSaveOptions();">
              üì± Download to Device
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      modal.id = 'saveOptionsModal';
    }
    
    async function saveToCollection(postId) {
      const saveBtn = document.querySelector(`[data-post-id="${postId}"].save-btn`);
      
      try {
        // Check if already saved
        const { data: existingSave } = await window.sb
          .from('saved_posts')
          .select('*')
          .eq('post_id', postId)
          .eq('user_id', window.currentUser.id)
          .maybeSingle();
        
        if (existingSave) {
          // Unsave
          await window.sb
            .from('saved_posts')
            .delete()
            .eq('post_id', postId)
            .eq('user_id', window.currentUser.id);
          
          saveBtn.classList.remove('saved');
          alert('Post removed from saved');
        } else {
          // Save
          await window.sb
            .from('saved_posts')
            .insert({
              post_id: postId,
              user_id: window.currentUser.id
            });
          
          saveBtn.classList.add('saved');
          alert('Post saved to collection!');
        }
        
      } catch (error) {
        console.error('Error toggling save:', error);
      }
    }
    
    async function saveToDevice(postId) {
      try {
        const { data: post, error } = await window.sb
          .from('posts')
          .select('*')
          .eq('id', postId)
          .single();
        
        if (error) throw error;
        
        if (post.image_url) {
          // Create download link
          const link = document.createElement('a');
          link.href = post.image_url;
          link.download = `post_${postId}_${Date.now()}.jpg`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          alert('Post downloaded to device!');
        } else {
          alert('No media to download');
        }
        
      } catch (error) {
        console.error('Error saving to device:', error);
        alert('Failed to download post');
      }
    }
    
    function closeSaveOptions() {
      const modal = document.getElementById('saveOptionsModal');
      if (modal) modal.remove();
    }
    
    async function showComments(postId) {
      try {
        const { data: comments, error } = await window.sb
          .from('comments')
          .select('*')
          .eq('post_id', postId)
          .order('created_at', { ascending: true });
        
        if (error) throw error;
        
        // Get user profiles for each comment
        const commentsWithProfiles = [];
        if (comments?.length) {
          for (const comment of comments) {
            let profile = null;
            try {
              const { data: userProfile } = await window.sb
                .from('profiles')
                .select('username, avatar_url')
                .eq('id', comment.user_id)
                .single();
              profile = userProfile;
            } catch (err) {
              console.log('Profile not found for user:', comment.user_id);
            }
            commentsWithProfiles.push({ ...comment, profiles: profile });
          }
        }
        
        // Create comments modal
        const modal = document.createElement('div');
        modal.id = 'commentsModal';
        modal.className = 'modal';
        modal.innerHTML = `
          <div class="modal-backdrop" onclick="closeCommentsModal()"></div>
          <div class="modal-dialog">
            <div class="modal-header">
              <h3>Comments</h3>
              <button onclick="closeCommentsModal()" class="close-btn">√ó</button>
            </div>
            <div class="modal-body">
              <div class="comments-list" id="commentsList">
                ${commentsWithProfiles?.map(comment => `
                  <div class="comment-item">
                    <div class="comment-avatar">
                      ${comment.profiles?.avatar_url ? 
                        `<img src="${comment.profiles.avatar_url}" alt="${comment.profiles.username}" />` :
                        (comment.profiles?.username?.[0]?.toUpperCase() || 'U')
                      }
                    </div>
                    <div class="comment-content">
                      <div class="comment-text">
                        <span class="comment-username">${comment.profiles?.username || 'User'}</span>
                        ${comment.content}
                      </div>
                      <div class="comment-time">${formatTime(comment.created_at)}</div>
                    </div>
                  </div>
                `).join('') || '<div class="no-content">No comments yet</div>'}
              </div>
              <form class="comment-form" onsubmit="addComment(event, '${postId}')">
                <input type="text" placeholder="Add a comment..." required />
                <button type="submit">Post</button>
              </form>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Prevent background scroll
        document.body.style.overflow = 'hidden';
        
      } catch (error) {
        console.error('Error loading comments:', error);
        alert('Failed to load comments. Please try again.');
      }
    }
    
    function closeCommentsModal() {
      const modal = document.getElementById('commentsModal');
      if (modal) {
        modal.remove();
        // Restore background scroll
        document.body.style.overflow = '';
      }
    }
    
    async function addComment(event, postId) {
      event.preventDefault();
      
      if (!window.currentUser) {
        alert('Please log in to comment');
        return;
      }
      
      const form = event.target;
      const input = form.querySelector('input');
      const submitBtn = form.querySelector('button[type="submit"]');
      const content = input.value.trim();
      
      if (!content) return;
      
      // Disable form while submitting
      submitBtn.disabled = true;
      submitBtn.textContent = 'Posting...';
      
      try {
        const { error } = await window.sb
          .from('comments')
          .insert({
            post_id: postId,
            user_id: window.currentUser.id,
            content: content
          });
        
        if (error) throw error;
        
        input.value = '';
        
        // Refresh comments
        closeCommentsModal();
        showComments(postId);
        
      } catch (error) {
        console.error('Error adding comment:', error);
        alert('Failed to add comment. Please try again.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Post';
      }
    }
    
    async function sharePost(postId) {
      // Create share modal with Instagram-like options
      const modal = document.createElement('div');
      modal.id = 'shareModal';
      modal.className = 'modal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeShareModal()"></div>
        <div class="modal-dialog share-modal">
          <div class="modal-header">
            <h3>Share</h3>
            <button onclick="closeShareModal()" class="close-btn">√ó</button>
          </div>
          <div class="modal-body">
            <div class="share-options">
              <div class="share-option" onclick="shareToWhatsApp('${postId}')">
                <div class="share-icon whatsapp">üì±</div>
                <span>WhatsApp</span>
              </div>
              <div class="share-option" onclick="shareToMessages('${postId}')">
                <div class="share-icon messages">üí¨</div>
                <span>Messages</span>
              </div>
              <div class="share-option" onclick="shareToInstagram('${postId}')">
                <div class="share-icon instagram">üì∑</div>
                <span>Instagram</span>
              </div>
              <div class="share-option" onclick="shareToTwitter('${postId}')">
                <div class="share-icon twitter">üê¶</div>
                <span>Twitter</span>
              </div>
              <div class="share-option" onclick="shareToFacebook('${postId}')">
                <div class="share-icon facebook">üìò</div>
                <span>Facebook</span>
              </div>
              <div class="share-option" onclick="copyPostLink('${postId}')">
                <div class="share-icon copy">üîó</div>
                <span>Copy Link</span>
              </div>
              <div class="share-option" onclick="shareViaEmail('${postId}')">
                <div class="share-icon email">üìß</div>
                <span>Email</span>
              </div>
              <div class="share-option" onclick="shareToStory('${postId}')">
                <div class="share-icon story">üìñ</div>
                <span>Add to Story</span>
              </div>
            </div>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      document.body.style.overflow = 'hidden';
    }
    
    // Close share modal
    function closeShareModal() {
      const modal = document.getElementById('shareModal');
      if (modal) {
        modal.remove();
        document.body.style.overflow = '';
      }
    }
    
    // Share to WhatsApp
    function shareToWhatsApp(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      const text = encodeURIComponent(`Check out this post: ${postUrl}`);
      const whatsappUrl = `https://wa.me/?text=${text}`;
      window.open(whatsappUrl, '_blank');
      closeShareModal();
    }
    
    // Share to Messages (SMS)
    function shareToMessages(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      const text = encodeURIComponent(`Check out this post: ${postUrl}`);
      const smsUrl = `sms:?body=${text}`;
      window.open(smsUrl, '_blank');
      closeShareModal();
    }
    
    // Share to Instagram
    function shareToInstagram(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      // Instagram doesn't support direct URL sharing, so copy to clipboard
      navigator.clipboard.writeText(postUrl).then(() => {
        alert('Link copied! You can now paste it in Instagram.');
      }).catch(() => {
        alert('Please copy this link manually: ' + postUrl);
      });
      closeShareModal();
    }
    
    // Share to Twitter
    function shareToTwitter(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      const text = encodeURIComponent('Check out this post!');
      const twitterUrl = `https://twitter.com/intent/tweet?text=${text}&url=${encodeURIComponent(postUrl)}`;
      window.open(twitterUrl, '_blank');
      closeShareModal();
    }
    
    // Share to Facebook
    function shareToFacebook(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(postUrl)}`;
      window.open(facebookUrl, '_blank');
      closeShareModal();
    }
    
    // Copy post link
    function copyPostLink(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      navigator.clipboard.writeText(postUrl).then(() => {
        alert('Link copied to clipboard!');
      }).catch(() => {
        alert('Please copy this link manually: ' + postUrl);
      });
      closeShareModal();
    }
    
    // Share via email
    function shareViaEmail(postId) {
      const postUrl = `${window.location.origin}${window.location.pathname}#post-${postId}`;
      const subject = encodeURIComponent('Check out this post');
      const body = encodeURIComponent(`I thought you might like this post: ${postUrl}`);
      const emailUrl = `mailto:?subject=${subject}&body=${body}`;
      window.open(emailUrl, '_blank');
      closeShareModal();
    }
    
    // Share to story
    function shareToStory(postId) {
      // This would typically open the story creation modal with the post content
      alert('Feature coming soon: Share to your story!');
      closeShareModal();
    }
    

    
    // Enhanced user profile function
    async function openEnhancedUserProfile(userId, username) {
      try {
        const { data: profile, error } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', userId)
          .single();
        
        if (error) throw error;
        
        // Check if user is blocked
        const { data: blockStatus } = await window.sb
          .from('blocked_users')
          .select('id')
          .eq('blocker_id', window.currentUser.id)
          .eq('blocked_id', userId)
          .single();
        
        const isBlocked = !!blockStatus;
        
        const { data: posts } = await window.sb
          .from('posts')
          .select('*')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(12);
        
        const modal = document.createElement('div');
        modal.className = 'modal user-profile-modal';
        modal.innerHTML = `
          <div class="modal-backdrop" onclick="closeUserProfile()"></div>
          <div class="modal-dialog">
            <div class="modal-header">
              <h3>${profile.username}</h3>
              <button onclick="closeUserProfile()" class="close-btn">√ó</button>
            </div>
            <div class="modal-body">
              <div class="profile-header">
                <div class="user-avatar" style="width: 80px; height: 80px; font-size: 2rem;">
                  ${profile.avatar_url ? 
                    `<img src="${profile.avatar_url}" alt="${profile.username}" />` : 
                    `<span>${profile.username[0]?.toUpperCase()}</span>`
                  }
                </div>
                <div class="profile-info">
                  <h2>${profile.username}</h2>
                  <p>${profile.full_name || ''}</p>
                  <p>${profile.bio || ''}</p>
                  <div class="user-actions">
                    <button class="btn btn-primary" onclick="followUser('${userId}')">Follow</button>
                    <button class="btn btn-secondary" onclick="openChat('${userId}', '${username}'); closeUserProfile();">Message</button>
                    <button class="btn ${isBlocked ? 'btn-success' : 'btn-danger'}" onclick="blockUser('${userId}')" style="background: ${isBlocked ? '#28a745' : '#dc3545'}">${isBlocked ? 'Unblock' : 'Block'}</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        modal.id = 'userProfileModal';
        
      } catch (error) {
        console.error('Error loading user profile:', error);
        alert('Failed to load user profile');
      }
    }
    
    function closeUserProfile() {
      const modal = document.getElementById('userProfileModal');
      if (modal) modal.remove();
    }
    
    // Follow user function with UI update and persistence
    async function followUser(userId) {
      if (!window.currentUser) {
        alert('Please log in to follow users');
        return;
      }
      
      const followBtn = event.target;
      const originalText = followBtn.textContent;
      
      try {
        followBtn.disabled = true;
        followBtn.textContent = 'Loading...';
        
        console.log('Checking follow status for user:', userId);
        
        const { data: existingFollow, error: checkError } = await window.sb
          .from('follows')
          .select('follower_id, followee_id')
          .eq('follower_id', window.currentUser.id)
          .eq('followee_id', userId)
          .maybeSingle();
        
        if (checkError) {
          console.error('Error checking follow status:', checkError);
          throw checkError;
        }
        
        if (existingFollow) {
          console.log('Unfollowing user:', userId);
          const { error } = await window.sb
            .from('follows')
            .delete()
            .eq('follower_id', window.currentUser.id)
            .eq('followee_id', userId);
          
          if (error) {
            console.error('Error unfollowing:', error);
            throw error;
          }
          
          followBtn.textContent = 'Follow';
          followBtn.className = 'btn btn-primary';
          
          // Update localStorage to persist unfollow
          const followedUsers = JSON.parse(localStorage.getItem('followedUsers') || '[]');
          const updatedFollowed = followedUsers.filter(id => id !== userId);
          localStorage.setItem('followedUsers', JSON.stringify(updatedFollowed));
          
        } else {
          console.log('Following user:', userId);
          const { error } = await window.sb
            .from('follows')
            .insert({
              follower_id: window.currentUser.id,
              followee_id: userId
            });
          
          if (error) {
            console.error('Error following:', error);
            throw error;
          }
          
          followBtn.textContent = 'Following';
          followBtn.className = 'btn btn-accent';
          
          // Update localStorage to persist follow
          const followedUsers = JSON.parse(localStorage.getItem('followedUsers') || '[]');
          if (!followedUsers.includes(userId)) {
            followedUsers.push(userId);
            localStorage.setItem('followedUsers', JSON.stringify(followedUsers));
          }
        }
        
        // Refresh messages list to show followed users immediately
        if (window.loadChats) {
          setTimeout(() => window.loadChats(), 100);
        }
        
        // Also refresh search results to update follow status
        const searchInput = document.getElementById('searchQuery');
        if (searchInput && searchInput.value.trim()) {
          setTimeout(() => searchUsers(searchInput.value), 200);
        } else {
          setTimeout(() => loadAllUsers(), 200);
        }
        
      } catch (error) {
        console.error('Error in followUser:', error);
        followBtn.textContent = originalText;
        alert('Failed to follow/unfollow user: ' + (error.message || 'Unknown error'));
      } finally {
        followBtn.disabled = false;
      }
    }
    
    // Block user function
    async function blockUser(userId) {
      if (!window.currentUser) {
        alert('Please log in first');
        return;
      }
      
      try {
        // Check if user is already blocked
        const { data: existingBlock } = await window.sb
          .from('blocked_users')
          .select('id')
          .eq('blocker_id', window.currentUser.id)
          .eq('blocked_id', userId)
          .single();
        
        if (existingBlock) {
          // User is already blocked, so unblock them
          if (!confirm('Unblock this user?')) return;
          
          const { error } = await window.sb
            .from('blocked_users')
            .delete()
            .eq('blocker_id', window.currentUser.id)
            .eq('blocked_id', userId);
          
          if (error) throw error;
          
          alert('User unblocked successfully');
          
        } else {
          // Block the user
          if (!confirm('Block this user? They will not be able to message you.')) return;
          
          const { error } = await window.sb
            .from('blocked_users')
            .insert({
              blocker_id: window.currentUser.id,
              blocked_id: userId
            });
          
          if (error) throw error;
          
          alert('User blocked successfully');
          
          // Close chat if currently chatting with blocked user
          if (window.currentChat && window.currentChat.partnerId === userId) {
            document.getElementById('chatArea').classList.add('hidden');
            document.getElementById('chatsList').style.display = 'block';
            window.currentChat = null;
          }
        }
        
        closeUserProfile();
        
        // Refresh chats list
        if (window.loadChats) {
          setTimeout(() => window.loadChats(), 100);
        }
        
      } catch (error) {
        console.error('Error blocking/unblocking user:', error);
        alert('Failed to block/unblock user: ' + error.message);
      }
    }
    
    // Message editing functions - avoid duplicate declaration
    window.messageEditMode = window.messageEditMode || {};
    
    function editMessage(messageId, currentContent) {
      const messageEl = document.querySelector(`[data-message-id="${messageId}"]`);
      const messageTextEl = messageEl.querySelector('.message-text');
      
      if (window.messageEditMode[messageId]) {
        delete window.messageEditMode[messageId];
        messageTextEl.textContent = currentContent;
        return;
      }
      
      window.messageEditMode[messageId] = true;
      
      const originalHTML = messageTextEl.innerHTML;
      messageTextEl.innerHTML = `
        <input type="text" value="${currentContent}" class="edit-input" style="background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.3); color: white; padding: 0.5rem; border-radius: 8px; width: 100%; font-size: 0.95rem;" />
        <div class="edit-actions" style="display: flex; gap: 0.5rem; margin-top: 0.5rem; justify-content: flex-end;">
          <button onclick="saveEditMessage('${messageId}')" style="background: #40e0ff; border: none; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; cursor: pointer; font-size: 0.8rem;">Save</button>
          <button onclick="cancelEditMessage('${messageId}', '${currentContent}')" style="background: #ff3080; border: none; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; cursor: pointer; font-size: 0.8rem;">Cancel</button>
        </div>
      `;
      
      messageTextEl.querySelector('.edit-input').focus();
    }
    
    async function saveEditMessage(messageId) {
      const messageEl = document.querySelector(`[data-message-id="${messageId}"]`);
      const newContent = messageEl.querySelector('.edit-input').value.trim();
      
      if (!newContent) {
        alert('Message cannot be empty');
        return;
      }
      
      try {
        const { error } = await window.sb
          .from('messages')
          .update({
            content: newContent,
            edited: true,
            edited_at: new Date().toISOString()
          })
          .eq('id', messageId);
        
        if (error) throw error;
        
        delete window.messageEditMode[messageId];
        
        // Update UI with edited text
        const messageTextEl = messageEl.querySelector('.message-text');
        messageTextEl.innerHTML = `${newContent} <span style="opacity: 0.7; font-size: 0.8em;">(edited)</span>`;
        
      } catch (error) {
        console.error('Error editing message:', error);
        alert('Failed to edit message');
      }
    }
    
    function cancelEditMessage(messageId, originalContent) {
      delete window.messageEditMode[messageId];
      const messageEl = document.querySelector(`[data-message-id="${messageId}"]`);
      const messageTextEl = messageEl.querySelector('.message-text');
      messageTextEl.textContent = originalContent;
    }
    

    
    // Post menu functions
    function togglePostMenu(event, userId, username, postId) {
      event.stopPropagation();
      const menu = document.getElementById(`menu-${postId}`);
      const allMenus = document.querySelectorAll('.post-menu');
      
      // Hide all other menus
      allMenus.forEach(m => {
        if (m !== menu) m.classList.remove('show');
      });
      
      // Toggle current menu
      if (menu) {
        menu.classList.toggle('show');
      }
    }
    
    function hidePostMenu(postId) {
      const menu = document.getElementById(`menu-${postId}`);
      if (menu) menu.classList.remove('show');
    }
    
    // Hide menus when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.post-more')) {
        document.querySelectorAll('.post-menu').forEach(menu => {
          menu.classList.remove('show');
        });
      }
    });
    
    // Start direct message function - ensure it works globally
    window.startDirectMessage = function(partnerId, partnerName) {
      console.log('Starting direct message with:', partnerId, partnerName);
      // Switch to messages section
      showSection('messages');
      
      // Small delay to ensure section is loaded
      setTimeout(() => {
        openChat(partnerId, partnerName);
      }, 100);
    };
    
    // Block current chat user function
    window.blockCurrentChatUser = function() {
      if (!window.currentChat) {
        alert('No active chat to block user from');
        return;
      }
      
      blockUser(window.currentChat.partnerId);
    };
    
    // Make functions globally available (only if not already defined)
    if (!window.toggleLike) window.toggleLike = toggleLike;
    if (!window.toggleSave) window.toggleSave = toggleSave;
    if (!window.togglePostMenu) window.togglePostMenu = togglePostMenu;
    if (!window.hidePostMenu) window.hidePostMenu = hidePostMenu;
    if (!window.saveToCollection) window.saveToCollection = saveToCollection;
    if (!window.saveToDevice) window.saveToDevice = saveToDevice;
    if (!window.closeSaveOptions) window.closeSaveOptions = closeSaveOptions;
    if (!window.showComments) window.showComments = showComments;
    if (!window.sharePost) window.sharePost = sharePost;
    if (!window.closeCommentsModal) window.closeCommentsModal = closeCommentsModal;
    if (!window.addComment) window.addComment = addComment;
    if (!window.closeShareModal) window.closeShareModal = closeShareModal;
    if (!window.shareToWhatsApp) window.shareToWhatsApp = shareToWhatsApp;
    if (!window.shareToMessages) window.shareToMessages = shareToMessages;
    if (!window.shareToInstagram) window.shareToInstagram = shareToInstagram;
    if (!window.shareToTwitter) window.shareToTwitter = shareToTwitter;
    if (!window.shareToFacebook) window.shareToFacebook = shareToFacebook;
    if (!window.copyPostLink) window.copyPostLink = copyPostLink;
    if (!window.shareViaEmail) window.shareViaEmail = shareViaEmail;
    if (!window.shareToStory) window.shareToStory = shareToStory;
    if (!window.showLikes) window.showLikes = showLikes;
    if (!window.closeLikesModal) window.closeLikesModal = closeLikesModal;
    if (!window.openEnhancedUserProfile) window.openEnhancedUserProfile = openEnhancedUserProfile;
    if (!window.closeUserProfile) window.closeUserProfile = closeUserProfile;
    if (!window.followUser) window.followUser = followUser;
    if (!window.blockUser) window.blockUser = blockUser;
    if (!window.editMessage) window.editMessage = editMessage;
    if (!window.saveEditMessage) window.saveEditMessage = saveEditMessage;
    if (!window.cancelEditMessage) window.cancelEditMessage = cancelEditMessage;

    if (!window.loadAllUsers) window.loadAllUsers = loadAllUsers;
    if (!window.checkChatLock) window.checkChatLock = checkChatLock;
    if (!window.setupChatLock) window.setupChatLock = setupChatLock;
    if (!window.startDirectMessage) window.startDirectMessage = startDirectMessage;
    
    // Open user profile or start chat
    function openUserProfile(userId, username) {
      // For now, start a chat with the user
      openChat(userId, username);
    }
    
    // Open chat function - ensure it works globally
    window.openChat = async function(partnerId, partnerName) {
      console.log('Opening chat with:', partnerId, partnerName);
      
      document.getElementById('chatsList').style.display = 'none';
      document.getElementById('chatArea').classList.remove('hidden');
      document.querySelector('.chat-name').textContent = partnerName;
      
      // Store current chat info
      window.currentChat = { partnerId, partnerName };
      
      // Load messages for this chat
      await loadMessages(partnerId);
    };
    
    // Enhanced Load messages function with WhatsApp UI - ensure it works globally
    window.loadMessages = async function(partnerId) {
      try {
        const { data: messages, error } = await window.sb
          .from('messages')
          .select('*')
          .or(`and(sender_id.eq.${window.currentUser?.id},receiver_id.eq.${partnerId}),and(sender_id.eq.${partnerId},receiver_id.eq.${window.currentUser?.id})`)
          .order('created_at', { ascending: true });
        
        if (error) throw error;
        
        const messagesContainer = document.getElementById('messages');
        messagesContainer.className = 'whatsapp-chat';
        let html = '';
        
        if (messages?.length) {
          let lastDate = '';
          let lastSenderId = null;
          
          messages.forEach((message, index) => {
            const isMe = message.sender_id === window.currentUser?.id;
            const messageDate = new Date(message.created_at).toDateString();
            const editedText = message.edited ? ' (edited)' : '';
            
            // Add date separator
            if (messageDate !== lastDate) {
              html += `<div class="date-separator">${formatDate(message.created_at)}</div>`;
              lastDate = messageDate;
              lastSenderId = null; // Reset sender grouping after date separator
            }
            
            // Group consecutive messages from same sender
            const prevMessage = messages[index - 1];
            const nextMessage = messages[index + 1];
            const isFirstInGroup = !prevMessage || prevMessage.sender_id !== message.sender_id || messageDate !== new Date(prevMessage.created_at).toDateString();
            const isLastInGroup = !nextMessage || nextMessage.sender_id !== message.sender_id || new Date(nextMessage.created_at).toDateString() !== messageDate;
            
            html += `
              <div class="message-wrapper ${isMe ? 'me' : 'them'}">
                <div class="message ${isFirstInGroup ? 'first' : ''} ${isLastInGroup ? 'last' : ''}" data-message-id="${message.id}">
                  <div class="message-content">
                    ${message.file_url && message.file_url !== 'null' && message.file_url.trim() ? 
                      (message.file_type?.startsWith('image/') ? 
                        `<img src="${message.file_url}" style="max-width: 200px; max-height: 200px; border-radius: 8px; cursor: pointer; display: block; margin-bottom: 4px;" onclick="showImageModal('${message.file_url}', '${message.file_name}')" />` :
                        `<video src="${message.file_url}" controls style="max-width: 200px; max-height: 200px; border-radius: 8px; display: block; margin-bottom: 4px;" />`
                      ) :
                      `<div class="message-text">${message.content}${editedText}</div>`
                    }
                    ${isLastInGroup ? `
                      <div class="message-time">
                        ${formatTime(message.created_at)}
                        ${isMe ? '<span class="message-status">‚úì‚úì</span>' : ''}
                      </div>
                    ` : ''}
                  </div>
                  ${isMe ? `
                    <div class="message-actions">
                      <button onclick="editMessage('${message.id}', '${message.content?.replace(/'/g, "\\'") || ''}')" class="message-action-btn" title="Edit">‚úèÔ∏è</button>
                    </div>
                  ` : ''}
                </div>
              </div>
            `;
            
            lastSenderId = message.sender_id;
          });
        } else {
          html = `
            <div class="empty-messages">
              <div class="empty-icon">üí¨</div>
              <h3>No messages yet</h3>
              <p>Send a message to start the conversation</p>
            </div>
          `;
        }
        
        messagesContainer.innerHTML = html;
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
      } catch (error) {
        console.error('Error loading messages:', error);
        const messagesContainer = document.getElementById('messages');
        if (messagesContainer) {
          messagesContainer.innerHTML = `
            <div class="empty-messages">
              <div class="empty-icon">‚ö†Ô∏è</div>
              <p>Error loading messages</p>
            </div>
          `;
        }
      }
    };
    
    // Format time function
    function formatTime(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const diff = now - date;
      
      if (diff < 60000) return 'now';
      if (diff < 3600000) return Math.floor(diff / 60000) + 'm';
      if (diff < 86400000) return Math.floor(diff / 3600000) + 'h';
      return Math.floor(diff / 86400000) + 'd';
    }
    
    // Send message function
    async function sendMessage(e) {
      e.preventDefault();
      
      if (!window.currentChat || !window.currentUser) return;
      
      const input = document.getElementById('messageInput');
      const content = input.value.trim();
      
      if (!content) return;
      
      try {
        const { error } = await window.sb
          .from('messages')
          .insert({
            sender_id: window.currentUser.id,
            receiver_id: window.currentChat.partnerId,
            content: content
          });
        
        if (error) throw error;
        
        input.value = '';
        
        // Immediately add message to UI
        const messagesContainer = document.getElementById('messages');
        if (messagesContainer) {
          const messageDiv = document.createElement('div');
          messageDiv.className = 'message me';
          messageDiv.innerHTML = `
            <div class="message-content">
              ${content}
              <time>now</time>
            </div>
          `;
          messagesContainer.appendChild(messageDiv);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }
    
    // Navigation function
    function showSection(sectionName) {
      // Update nav buttons
      document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
      document.querySelector(`[data-section="${sectionName}"]`)?.classList.add('active');
      
      // Update sections
      document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
      document.getElementById(sectionName + 'Section')?.classList.add('active');
      
      // Load section content
      if (sectionName === 'search') {
        const searchInput = document.getElementById('searchQuery');
        if (searchInput) {
          searchInput.focus();
          // Load all users immediately when search section is opened
          loadAllUsers();
        }
      } else if (sectionName === 'profile') {
        // Load profile info and posts by default when opening profile
        loadProfileInfo();
        setTimeout(() => showProfileTab('posts'), 100);
      } else if (sectionName === 'messages') {
        // Check chat lock when accessing messages
        if (!checkChatLock()) {
          // Prevent access and go back to home
          showSection('home');
          return;
        }
        // Update chat lock button visibility
        updateChatLockButtons();
        // Reset chat area when entering messages section
        const chatArea = document.getElementById('chatArea');
        const chatsList = document.getElementById('chatsList');
        if (chatArea) chatArea.classList.add('hidden');
        if (chatsList) chatsList.style.display = 'block';
        window.currentChat = null;
        // Always refresh chats when entering messages section
        if (window.loadChats) {
          window.loadChats();
        }
      } else if (sectionName === 'reels') {
        // Load reels when reels section is opened
        if (window.loadReels) window.loadReels();
      }
    }
    
    // Ensure user profile exists
    async function ensureUserProfile(user) {
      try {
        let { data: profile, error: profileError } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();
        
        if (profileError && profileError.code === 'PGRST116') {
          // Profile doesn't exist, create one
          const username = user.email.split('@')[0] + '_' + Math.random().toString(36).substr(2, 4);
          
          const { data: newProfile, error: createError } = await window.sb
            .from('profiles')
            .insert({
              id: user.id,
              username: username,
              full_name: user.user_metadata?.full_name || '',
              avatar_url: user.user_metadata?.avatar_url || '',
              bio: user.user_metadata?.bio || '',
              links: user.user_metadata?.links || '',
              is_private: false
            })
            .select()
            .single();
          
          if (createError) {
            console.error('‚ùå Error creating profile:', createError);
          } else {
            profile = newProfile;
            console.log('‚úÖ Profile created:', profile);
          }
        }
        
        if (profile) {
          window.currentUser.profile = profile;
        }
        
        return profile;
      } catch (error) {
        console.error('Error ensuring profile:', error);
        return null;
      }
    }
    
    // Initialize app with session check
    async function initializeApp() {
      console.log('Initializing app...');
      
      // Wait for Supabase to be ready
      if (!window.sb) {
        console.log('Waiting for Supabase...');
        setTimeout(initializeApp, 500);
        return;
      }
      
      // Check authentication
      await checkAuthSession();
    }
    
    // Modal scroll prevention
    function openModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        // Prevent background scroll
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
      }
    }
    
    function closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('hidden');
        document.body.classList.remove('modal-open');
        // Restore background scroll
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
      }
    }
    
    // Profile functionality
    function showProfileTab(tabName) {
      // Update tab buttons
      document.querySelectorAll('.profile-tab').forEach(tab => {
        tab.classList.remove('active');
      });
      document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');
      
      // Show content
      document.querySelectorAll('.profile-tab-content').forEach(content => {
        content.classList.add('hidden');
      });
      document.getElementById(`${tabName}Content`)?.classList.remove('hidden');
      
      // Load content based on tab
      if (tabName === 'posts') {
        loadUserPosts();
      } else if (tabName === 'reels') {
        loadUserReels();
      } else if (tabName === 'tagged') {
        loadTaggedPosts();
      }
    }
    
    async function loadTaggedPosts() {
      // Placeholder for tagged posts
      const container = document.getElementById('taggedContent');
      container.innerHTML = '<div class="no-content">No tagged posts yet</div>';
    }
    
    async function loadUserPosts() {
      if (!window.currentUser) return;
      
      try {
        const { data: posts, error } = await window.sb
          .from('posts')
          .select('*')
          .eq('user_id', window.currentUser.id)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const container = document.getElementById('postsContent');
        let html = '';
        
        if (posts?.length) {
          html = '<div class="posts-grid">';
          posts.forEach(post => {
            html += `
              <div class="post-item" onclick="viewPost('${post.id}')">
                ${post.image_url ? `<img src="${post.image_url}" alt="Post" />` : '<div style="background:#333;height:100%;display:flex;align-items:center;justify-content:center;color:#fff;">üìù</div>'}
                <div class="post-overlay">
                  <span>‚ù§Ô∏è 0</span>
                  <span>üí¨ 0</span>
                </div>
                <div class="post-actions">
                  <button class="action-btn" onclick="event.stopPropagation(); editPost('${post.id}')">‚úèÔ∏è</button>
                  <button class="action-btn" onclick="event.stopPropagation(); deletePost('${post.id}')">üóëÔ∏è</button>
                </div>
              </div>
            `;
          });
          html += '</div>';
        } else {
          html = '<div class="no-content">No posts yet</div>';
        }
        
        container.innerHTML = html;
        
      } catch (error) {
        console.error('Error loading posts:', error);
      }
    }
    
    async function loadUserReels() {
      if (!window.currentUser) return;
      
      try {
        const { data: reels, error } = await window.sb
          .from('posts')
          .select('*')
          .eq('user_id', window.currentUser.id)
          .not('image_url', 'is', null)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const container = document.getElementById('reelsContent');
        let html = '';
        
        if (reels?.length) {
          // Filter for video content (reels)
          const videoReels = reels.filter(reel => 
            reel.image_url && (reel.image_url.includes('video') || reel.image_url.startsWith('data:video'))
          );
          
          if (videoReels.length > 0) {
            html = '<div class="reels-grid" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 2px;">';
            videoReels.forEach(reel => {
              html += `
                <div class="reel-item" onclick="viewReel('${reel.id}')" style="aspect-ratio: 9/16; background: #333; border-radius: 8px; overflow: hidden; cursor: pointer; position: relative;">
                  <video src="${reel.image_url}" style="width: 100%; height: 100%; object-fit: cover;" muted />
                  <div class="reel-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.3); display: flex; align-items: center; justify-content: center; opacity: 0; transition: opacity 0.2s;">
                    <svg width="40" height="40" viewBox="0 0 24 24" fill="white">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                  <div class="post-actions" style="position: absolute; top: 8px; right: 8px; opacity: 0; transition: opacity 0.2s;">
                    <button class="action-btn" onclick="event.stopPropagation(); editPost('${reel.id}')" style="background: rgba(0,0,0,0.7); border: none; color: white; padding: 4px 8px; border-radius: 4px; margin-left: 4px; cursor: pointer;">‚úèÔ∏è</button>
                    <button class="action-btn" onclick="event.stopPropagation(); deletePost('${reel.id}')" style="background: rgba(0,0,0,0.7); border: none; color: white; padding: 4px 8px; border-radius: 4px; margin-left: 4px; cursor: pointer;">üóëÔ∏è</button>
                  </div>
                </div>
              `;
            });
            html += '</div>';
          } else {
            html = '<div class="no-content">No reels yet</div>';
          }
        } else {
          html = '<div class="no-content">No reels yet</div>';
        }
        
        container.innerHTML = html;
        
        // Add hover effects
        container.querySelectorAll('.reel-item').forEach(item => {
          item.addEventListener('mouseenter', () => {
            const overlay = item.querySelector('.reel-overlay');
            const actions = item.querySelector('.post-actions');
            if (overlay) overlay.style.opacity = '1';
            if (actions) actions.style.opacity = '1';
          });
          item.addEventListener('mouseleave', () => {
            const overlay = item.querySelector('.reel-overlay');
            const actions = item.querySelector('.post-actions');
            if (overlay) overlay.style.opacity = '0';
            if (actions) actions.style.opacity = '0';
          });
        });
        
      } catch (error) {
        console.error('Error loading reels:', error);
        const container = document.getElementById('reelsContent');
        container.innerHTML = '<div class="no-content">Error loading reels</div>';
      }
    }
    
    async function loadUserHighlights() {
      if (!window.currentUser) return;
      
      try {
        const { data: highlights, error } = await window.sb
          .from('highlights')
          .select('*')
          .eq('user_id', window.currentUser.id)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const container = document.getElementById('highlightsContent');
        let html = '';
        
        if (highlights?.length) {
          html = '<div class="highlights-grid">';
          highlights.forEach(highlight => {
            html += `
              <div class="highlight-item" onclick="viewHighlight('${highlight.id}')">
                <div class="highlight-cover">
                  ${highlight.cover_url ? `<img src="${highlight.cover_url}" alt="${highlight.name}" />` : 'üìö'}
                </div>
                <div class="highlight-name">${highlight.name}</div>
                <div class="post-actions" style="position:relative;top:0;right:0;opacity:1;">
                  <button class="action-btn" onclick="event.stopPropagation(); editHighlight('${highlight.id}')">‚úèÔ∏è</button>
                  <button class="action-btn" onclick="event.stopPropagation(); deleteHighlight('${highlight.id}')">üóëÔ∏è</button>
                </div>
              </div>
            `;
          });
          html += '</div>';
        } else {
          html = '<div class="no-content">No highlights yet</div>';
        }
        
        container.innerHTML = html;
        
      } catch (error) {
        console.error('Error loading highlights:', error);
      }
    }
    
    // Post management functions
    function viewPost(postId) {
      console.log('Viewing post:', postId);
      // Implement post viewing modal
    }
    
    function viewReel(reelId) {
      console.log('Viewing reel:', reelId);
      // Switch to reels section and highlight the reel
      showSection('reels');
    }
    
    function editPost(postId) {
      console.log('Editing post:', postId);
      // Implement post editing
    }
    
    async function deletePost(postId) {
      if (!confirm('Delete this post?')) return;
      
      try {
        const { error } = await window.sb
          .from('posts')
          .delete()
          .eq('id', postId);
        
        if (error) throw error;
        
        loadUserPosts(); // Reload posts
        alert('Post deleted!');
        
      } catch (error) {
        console.error('Error deleting post:', error);
        alert('Failed to delete post');
      }
    }
    
    // Highlight management functions
    function viewHighlight(highlightId) {
      console.log('Viewing highlight:', highlightId);
    }
    
    function editHighlight(highlightId) {
      console.log('Editing highlight:', highlightId);
    }
    
    async function deleteHighlight(highlightId) {
      if (!confirm('Delete this highlight?')) return;
      
      try {
        const { error } = await window.sb
          .from('highlights')
          .delete()
          .eq('id', highlightId);
        
        if (error) throw error;
        
        loadUserHighlights(); // Reload highlights
        alert('Highlight deleted!');
        
      } catch (error) {
        console.error('Error deleting highlight:', error);
        alert('Failed to delete highlight');
      }
    }
    
    // Settings functions
    async function editProfile() {
      closeModal('settingsModal');
      
      // Get current profile data
      let currentProfile = {};
      try {
        const { data: profile } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', window.currentUser.id)
          .single();
        currentProfile = profile || {};
      } catch (error) {
        console.error('Error loading profile for edit:', error);
      }
      
      // Create edit profile modal
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.id = 'editProfileModal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeEditProfile()"></div>
        <div class="modal-dialog">
          <div class="modal-header">
            <h3>Edit Profile</h3>
            <button class="close-btn" onclick="closeEditProfile()">&times;</button>
          </div>
          <form class="modal-form" onsubmit="saveProfile(event)">
            <label>Username
              <input type="text" id="editUsername" value="${currentProfile.username || ''}" required />
            </label>
            <label>Full Name
              <input type="text" id="editFullname" value="${currentProfile.full_name || ''}" />
            </label>
            <label>Bio
              <textarea id="editBio" rows="3" placeholder="Tell something about yourself...">${currentProfile.bio || ''}</textarea>
            </label>
            <label>Avatar URL
              <input type="url" id="editAvatar" value="${currentProfile.avatar_url || ''}" placeholder="https://example.com/avatar.jpg" />
            </label>
            <div class="modal-actions">
              <button type="button" onclick="closeEditProfile()" class="cancel-btn">Cancel</button>
              <button type="submit" class="save-btn">Save Changes</button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(modal);
      openModal('editProfileModal');
    }
    
    function closeEditProfile() {
      const modal = document.getElementById('editProfileModal');
      if (modal) {
        closeModal('editProfileModal');
        modal.remove();
      }
    }
    
    // Edit Profile functions
    window.showEditProfile = function() {
      closeModal('settingsModal');
      document.getElementById('editProfileModal').classList.remove('hidden');
      document.body.classList.add('modal-open');
      loadEditProfileData();
    };
    
    window.closeEditProfile = function() {
      document.getElementById('editProfileModal').classList.add('hidden');
      document.body.classList.remove('modal-open');
    };
    
    window.selectProfilePic = function() {
      document.getElementById('profilePicInput').click();
    };
    
    async function loadEditProfileData() {
      if (!window.currentUser) return;
      
      try {
        const { data: profile } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', window.currentUser.id)
          .single();
        
        if (profile) {
          document.getElementById('edit_username').value = profile.username || '';
          document.getElementById('edit_fullname').value = profile.full_name || '';
          document.getElementById('edit_bio').value = profile.bio || '';
          
          // Handle links field as TEXT
          document.getElementById('edit_links').value = profile.links || '';
          
          document.getElementById('edit_private').checked = profile.is_private || false;
          
          // Load current profile picture
          const preview = document.getElementById('profilePicPreview');
          const placeholder = document.getElementById('profilePicPlaceholder');
          
          if (profile.avatar_url && profile.avatar_url.trim()) {
            preview.src = profile.avatar_url;
            preview.style.display = 'block';
            placeholder.style.display = 'none';
          } else {
            preview.style.display = 'none';
            placeholder.style.display = 'flex';
          }
          
          // Update bio counter
          document.getElementById('bioCount').textContent = (profile.bio || '').length;
        }
      } catch (error) {
        console.error('Error loading profile data:', error);
      }
    }
    
    async function handleProfilePicUpload(e) {
      const file = e.target.files?.[0];
      if (!file) return;
      
      // Validate file
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }
      
      if (file.size > 5 * 1024 * 1024) {
        alert('Image too large. Maximum size is 5MB.');
        return;
      }
      
      try {
        // Show preview
        const reader = new FileReader();
        reader.onload = (e) => {
          const preview = document.getElementById('profilePicPreview');
          const placeholder = document.getElementById('profilePicPlaceholder');
          
          preview.src = e.target.result;
          preview.style.display = 'block';
          placeholder.style.display = 'none';
        };
        reader.readAsDataURL(file);
        
      } catch (error) {
        console.error('Error handling profile pic:', error);
        alert('Error processing image. Please try again.');
      }
    }
    
    async function handleEditProfileSubmit(e) {
      e.preventDefault();
      
      if (!window.currentUser) {
        console.error('No current user found');
        return;
      }
      
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      
      console.log('Starting profile update...');
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Saving...';
        
        let avatarUrl = '';
        
        // Handle profile picture upload
        const fileInput = document.getElementById('profilePicInput');
        if (fileInput.files?.[0]) {
          const file = fileInput.files[0];
          console.log('Processing file:', file.name, file.size, file.type);
          
          // Validate file
          if (!file.type.startsWith('image/')) {
            alert('Please select an image file');
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
            return;
          }
          
          if (file.size > 5 * 1024 * 1024) {
            alert('Image too large. Maximum size is 5MB.');
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
            return;
          }
          
          console.log('Converting file to base64...');
          const reader = new FileReader();
          avatarUrl = await new Promise((resolve, reject) => {
            reader.onload = () => {
              console.log('File converted to base64, length:', reader.result.length);
              resolve(reader.result);
            };
            reader.onerror = () => reject(new Error('Failed to read image file'));
            reader.readAsDataURL(file);
          });
        } else {
          // Keep existing avatar if no new file selected
          const currentProfile = window.currentUser.profile;
          avatarUrl = currentProfile?.avatar_url || '';
          console.log('Using existing avatar URL');
        }
        
        // Process links as TEXT field - ensure we never send empty string
        const linksValue = document.getElementById('edit_links').value.trim();
        const linksText = linksValue ? linksValue : null;
        
        const formData = {
          username: document.getElementById('edit_username').value.trim(),
          full_name: document.getElementById('edit_fullname').value.trim() || null,
          avatar_url: avatarUrl || null,
          bio: document.getElementById('edit_bio').value.trim() || null,
          links: linksText,
          is_private: document.getElementById('edit_private').checked
        };
        
        console.log('Form data prepared:', {
          ...formData,
          avatar_url: avatarUrl ? `[${avatarUrl.length} chars]` : 'empty'
        });
        
        // Validate username
        if (!formData.username) {
          alert('Username is required');
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
          return;
        }
        
        console.log('Updating profile in database...');
        const { data, error } = await window.sb
          .from('profiles')
          .update(formData)
          .eq('id', window.currentUser.id)
          .select();
          
        console.log('Database response:', { data, error });
          
        if (error) {
          console.error('Database error:', error);
          throw error;
        }
        
        console.log('Profile updated successfully');
        
        // Update current user profile
        if (!window.currentUser.profile) window.currentUser.profile = {};
        window.currentUser.profile = { ...window.currentUser.profile, ...formData };
        
        // Update UI
        loadProfileInfo();
        
        // Stories removed - no need to reload
        
        document.getElementById('editProfileModal').classList.add('hidden');
        document.body.classList.remove('modal-open');
        alert('Profile updated successfully!');
        
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
        
      } catch (error) {
        console.error('Full error object:', error);
        console.error('Error message:', error.message);
        console.error('Error code:', error.code);
        console.error('Error details:', error.details);
        
        // More specific error handling
        if (error.code === '23505' || error.message.includes('duplicate key') || error.message.includes('username')) {
          alert('Username already taken. Please choose a different one.');
        } else if (error.message.includes('avatar_url') || error.message.includes('image')) {
          alert('Error uploading profile picture. Please try a smaller image.');
        } else if (error.message.includes('network') || error.message.includes('fetch')) {
          alert('Network error. Please check your connection and try again.');
        } else {
          alert(`Failed to update profile: ${error.message || JSON.stringify(error)}`);
        }
        
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    }
    
    // Simplified chat functions
    window.saveChatOnly = function() {
      if (!window.currentChat) {
        alert('No active chat to save');
        return;
      }
      
      try {
        const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
        const existingIndex = savedChats.findIndex(chat => chat.partnerId === window.currentChat.partnerId);
        
        if (existingIndex === -1) {
          savedChats.push({
            partnerId: window.currentChat.partnerId,
            partnerName: window.currentChat.partnerName,
            savedAt: new Date().toISOString()
          });
          localStorage.setItem('savedChats', JSON.stringify(savedChats));
          alert('Chat saved successfully!');
        } else {
          alert('Chat is already saved!');
        }
        
        if (window.loadChats) window.loadChats();
      } catch (error) {
        console.error('Error saving chat:', error);
        alert('Failed to save chat');
      }
    };
    
    window.deleteChatOnly = async function() {
      if (!window.currentChat) {
        alert('No active chat to delete');
        return;
      }
      
      if (!confirm('Delete all messages with this user? This action cannot be undone.')) return;
      
      try {
        const { error } = await window.sb
          .from('messages')
          .delete()
          .or(`and(sender_id.eq.${window.currentUser.id},receiver_id.eq.${window.currentChat.partnerId}),and(sender_id.eq.${window.currentChat.partnerId},receiver_id.eq.${window.currentUser.id})`);
        
        if (error) throw error;
        
        const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
        const filtered = savedChats.filter(chat => chat.partnerId !== window.currentChat.partnerId);
        localStorage.setItem('savedChats', JSON.stringify(filtered));
        
        alert('Chat deleted successfully!');
        
        document.getElementById('chatArea').classList.add('hidden');
        document.getElementById('chatsList').style.display = 'block';
        window.currentChat = null;
        if (window.loadChats) window.loadChats();
      } catch (error) {
        console.error('Error deleting chat:', error);
        alert('Failed to delete chat: ' + error.message);
      }
    };
    
    // Disable account function
    window.disableAccount = async function() {
      if (!confirm('Are you sure you want to disable your account? You will need to enter your password to reactivate it.')) return;
      
      const password = prompt('Enter your current password to confirm account disable:');
      if (!password) return;
      
      try {
        // Update profile to mark as disabled
        const { error } = await window.sb
          .from('profiles')
          .update({ 
            is_disabled: true,
            disabled_at: new Date().toISOString(),
            reactivation_password: btoa(password)
          })
          .eq('id', window.currentUser.id);
        
        if (error) throw error;
        
        alert('Account disabled successfully. You will be logged out.');
        
        // Clear data and logout
        localStorage.clear();
        await window.sb.auth.signOut();
        window.location.href = 'auth.html';
        
      } catch (error) {
        console.error('Error disabling account:', error);
        alert('Failed to disable account: ' + error.message);
      }
    };
    
    // Update chat lock button visibility
    function updateChatLockButtons() {
      const isEnabled = localStorage.getItem('chatLockEnabled') === 'true';
      const isDisabled = localStorage.getItem('chatLockDisabled') === 'true';
      
      if (isEnabled && !isDisabled) {
        document.getElementById('chatLockBtn').style.display = 'none';
        document.getElementById('disableChatLockBtn').style.display = 'block';
      } else {
        document.getElementById('chatLockBtn').style.display = 'block';
        document.getElementById('disableChatLockBtn').style.display = 'none';
      }
    }
    
    // Make functions globally available
    window.editProfile = editProfile;
    window.closeEditProfile = closeEditProfile;
    window.saveProfile = saveProfile;
    window.accountPrivacy = accountPrivacy;
    window.viewBlockedAccounts = viewBlockedAccounts;
    window.unblockUser = unblockUser;
    window.closeBlockedUsers = closeBlockedUsers;
    window.notificationSettings = notificationSettings;
    window.saveNotificationSettings = saveNotificationSettings;
    window.closeNotificationSettings = closeNotificationSettings;
    window.dataDownload = dataDownload;
    window.setupChatLock = setupChatLock;
    window.disableAccount = disableAccount;
    window.updateChatLockButtons = updateChatLockButtons;
    window.deleteAllChats = deleteAllChats;
    window.deleteAllChatsFromModal = deleteAllChatsFromModal;
    
    // Show image in modal
    window.showImageModal = function(imageUrl, fileName) {
      const modal = document.createElement('div');
      modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.9); z-index: 10000; display: flex; align-items: center; justify-content: center;';
      modal.innerHTML = `
        <div style="position: relative; max-width: 90%; max-height: 90%;">
          <img src="${imageUrl}" style="max-width: 100%; max-height: 100%; object-fit: contain;" />
          <button onclick="this.parentElement.parentElement.remove()" style="position: absolute; top: 10px; right: 10px; background: rgba(255,255,255,0.8); border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer; font-size: 18px;">√ó</button>
          <button onclick="downloadFile('${imageUrl}', '${fileName || 'image'}')" style="position: absolute; bottom: 10px; right: 10px; background: #0095f6; color: white; border: none; padding: 8px 16px; border-radius: 20px; cursor: pointer;">Download</button>
        </div>
      `;
      modal.onclick = (e) => { if (e.target === modal) modal.remove(); };
      document.body.appendChild(modal);
    };
    
    // Download file
    window.downloadFile = function(fileUrl, fileName) {
      try {
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = fileName || 'download';
        link.target = '_blank';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } catch (error) {
        window.open(fileUrl, '_blank');
      }
    };
    
    // Send file message functionality
    window.sendFileMessage = async function(input) {
      const file = input.files[0];
      if (!file || !window.currentChat || !window.currentUser) return;
      
      try {
        const reader = new FileReader();
        const fileData = await new Promise((resolve, reject) => {
          reader.onload = () => resolve(reader.result);
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
        
        const { error } = await window.sb
          .from('messages')
          .insert({
            sender_id: window.currentUser.id,
            receiver_id: window.currentChat.partnerId,
            content: null,
            file_url: fileData,
            file_name: file.name,
            file_type: file.type
          });
        
        if (error) throw error;
        
        input.value = '';
        await window.loadMessages(window.currentChat.partnerId);
      } catch (error) {
        console.error('Error sending file:', error);
        alert('Failed to send file');
      }
    };
    
    // Schedule message functionality
    window.openScheduleModal = function() {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.id = 'scheduleModal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeScheduleModal()"></div>
        <div class="modal-dialog" style="max-width: 400px; background: #262626; border-radius: 12px;">
          <div class="modal-header" style="padding: 1rem; border-bottom: 1px solid #3c3c3c; color: #fff;">
            <h3 style="margin: 0; font-size: 1.1rem;">Schedule Message</h3>
            <button onclick="closeScheduleModal()" class="close-btn" style="color: #fff;">√ó</button>
          </div>
          <div class="modal-body" style="padding: 1.5rem;">
            <textarea id="scheduleContent" placeholder="Type your message..." style="width: 100%; height: 80px; background: #3c3c3c; border: 1px solid #555; color: #fff; padding: 0.75rem; border-radius: 8px; resize: none;"></textarea>
            <div style="margin-top: 1rem;">
              <label style="color: #fff; display: block; margin-bottom: 0.5rem;">Schedule for:</label>
              <input type="datetime-local" id="scheduleTime" style="width: 100%; background: #3c3c3c; border: 1px solid #555; color: #fff; padding: 0.75rem; border-radius: 8px;" />
            </div>
            <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
              <button onclick="closeScheduleModal()" style="flex: 1; padding: 0.75rem; background: #6c757d; color: white; border: none; border-radius: 8px; cursor: pointer;">Cancel</button>
              <button onclick="scheduleMessage()" style="flex: 1; padding: 0.75rem; background: #0095f6; color: white; border: none; border-radius: 8px; cursor: pointer;">Schedule</button>
            </div>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
      
      // Set minimum time to current time
      const now = new Date();
      now.setMinutes(now.getMinutes() + 1);
      document.getElementById('scheduleTime').min = now.toISOString().slice(0, 16);
    };
    
    window.closeScheduleModal = function() {
      const modal = document.getElementById('scheduleModal');
      if (modal) modal.remove();
    };
    
    window.scheduleMessage = async function() {
      const content = document.getElementById('scheduleContent').value.trim();
      const scheduleTime = document.getElementById('scheduleTime').value;
      
      if (!content) {
        alert('Please enter a message');
        return;
      }
      
      if (!scheduleTime) {
        alert('Please select a time');
        return;
      }
      
      if (!window.currentChat) {
        alert('No active chat');
        return;
      }
      
      try {
        const { error } = await window.sb
          .from('scheduled_messages')
          .insert({
            sender_id: window.currentUser.id,
            receiver_id: window.currentChat.partnerId,
            content: content,
            scheduled_for: new Date(scheduleTime).toISOString()
          });
        
        if (error) throw error;
        
        alert('Message scheduled successfully!');
        closeScheduleModal();
      } catch (error) {
        console.error('Error scheduling message:', error);
        alert('Failed to schedule message');
      }
    };
    
    // Delete chat from current user's view only
    window.deleteChatFromView = async function() {
      if (!window.currentChat) {
        alert('No active chat to delete');
        return;
      }
      
      if (!confirm('Delete this chat from your view? The other user will still see the messages.')) return;
      
      try {
        // Remove from saved chats
        const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
        const filtered = savedChats.filter(chat => chat.partnerId !== window.currentChat.partnerId);
        localStorage.setItem('savedChats', JSON.stringify(filtered));
        
        // Add to hidden chats list
        const hiddenChats = JSON.parse(localStorage.getItem('hiddenChats') || '[]');
        if (!hiddenChats.includes(window.currentChat.partnerId)) {
          hiddenChats.push(window.currentChat.partnerId);
          localStorage.setItem('hiddenChats', JSON.stringify(hiddenChats));
        }
        
        alert('Chat removed from your view!');
        
        document.getElementById('chatArea').classList.add('hidden');
        document.getElementById('chatsList').style.display = 'block';
        window.currentChat = null;
        if (window.loadChats) window.loadChats();
      } catch (error) {
        console.error('Error deleting chat from view:', error);
        alert('Failed to delete chat');
      }
    };
    
    // Delete all chats function
    window.deleteAllChats = async function() {
      if (!window.currentUser) {
        alert('Please log in first');
        return;
      }
      
      if (!confirm('‚ö†Ô∏è WARNING: This will permanently delete ALL your chat messages from the database. This action cannot be undone. Are you sure?')) {
        return;
      }
      
      // Double confirmation
      if (!confirm('This is your final warning! All messages will be permanently deleted. Continue?')) {
        return;
      }
      
      try {
        console.log('Deleting all messages for user:', window.currentUser.id);
        
        // Delete all messages where current user is sender or receiver
        const { error } = await window.sb
          .from('messages')
          .delete()
          .or(`sender_id.eq.${window.currentUser.id},receiver_id.eq.${window.currentUser.id}`);
        
        if (error) {
          console.error('Database delete error:', error);
          throw error;
        }
        
        console.log('All messages deleted successfully');
        
        // Clear all local storage related to chats
        localStorage.removeItem('savedChats');
        localStorage.removeItem('hiddenChats');
        
        // Close current chat if open
        if (window.currentChat) {
          document.getElementById('chatArea').classList.add('hidden');
          document.getElementById('chatsList').style.display = 'block';
          window.currentChat = null;
        }
        
        // Reload chats list
        if (window.loadChats) {
          await window.loadChats();
        }
        
        alert('‚úÖ All chats have been permanently deleted from your account and the database!');
        
      } catch (error) {
        console.error('Error deleting all chats:', error);
        alert('‚ùå Failed to delete all chats: ' + error.message);
      }
    };
    
    // Enhanced Chat themes function with 18 themes
    window.showChatThemes = function() {
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.id = 'chatThemesModal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeChatThemes()"></div>
        <div class="modal-dialog" style="max-width: 600px; max-height: 90vh; overflow-y: auto;">
          <div class="modal-header" style="background: #1a1a1a; color: #fff; border-bottom: 1px solid #333;">
            <h3 style="margin: 0; color: #fff; display: flex; align-items: center; gap: 0.5rem;">
              <span style="font-size: 1.5rem;">üé®</span>
              Chat Background Themes
            </h3>
            <button onclick="closeChatThemes()" class="close-btn" style="color: #fff;">√ó</button>
          </div>
          <div class="modal-body" style="background: #1a1a1a; padding: 1.5rem;">
            <div class="themes-grid" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem;">
              <div class="theme-item" onclick="applyChatTheme('default')" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåå</span>
                <span>Default</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('dark')" style="background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåë</span>
                <span>Dark Night</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('ocean')" style="background: linear-gradient(135deg, #0077be 0%, #00a8cc 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåä</span>
                <span>Ocean Blue</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('sunset')" style="background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåÖ</span>
                <span>Sunset</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('forest')" style="background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üå≤</span>
                <span>Forest</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('purple')" style="background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üíú</span>
                <span>Purple Dream</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('pink')" style="background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üå∏</span>
                <span>Cherry Blossom</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('red')" style="background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üî•</span>
                <span>Fire Red</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('gold')" style="background: linear-gradient(135deg, #f7971e 0%, #ffd200 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">‚ú®</span>
                <span>Golden Hour</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('mint')" style="background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üçÉ</span>
                <span>Fresh Mint</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('cosmic')" style="background: linear-gradient(135deg, #4c1d95 0%, #7c3aed 50%, #a855f7 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåå</span>
                <span>Cosmic Purple</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('ice')" style="background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">‚ùÑÔ∏è</span>
                <span>Ice Blue</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('neon')" style="background: linear-gradient(135deg, #fd79a8 0%, #fdcb6e 50%, #6c5ce7 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåà</span>
                <span>Neon Vibes</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('emerald')" style="background: linear-gradient(135deg, #00b894 0%, #00cec9 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üíé</span>
                <span>Emerald</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('lavender')" style="background: linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">ü™ª</span>
                <span>Lavender</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('coral')" style="background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">ü™∏</span>
                <span>Coral Pink</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('midnight')" style="background: linear-gradient(135deg, #2d3436 0%, #636e72 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåÉ</span>
                <span>Midnight</span>
              </div>
              <div class="theme-item" onclick="applyChatTheme('aurora')" style="background: linear-gradient(135deg, #00b894 0%, #00cec9 50%, #74b9ff 100%); height: 100px; border-radius: 12px; cursor: pointer; display: flex; flex-direction: column; align-items: center; justify-content: center; color: white; font-weight: 600; transition: transform 0.2s, box-shadow 0.2s;">
                <span style="font-size: 1.5rem; margin-bottom: 0.25rem;">üåå</span>
                <span>Aurora</span>
              </div>
            </div>
            <div style="margin-top: 1.5rem; padding-top: 1rem; border-top: 1px solid #333; text-align: center;">
              <p style="color: #888; font-size: 0.9rem; margin: 0;">üí° Choose a theme to personalize your chat background</p>
            </div>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
    };
    
    window.closeChatThemes = function() {
      const modal = document.getElementById('chatThemesModal');
      if (modal) modal.remove();
    };
    
    window.toggleChatTheme = function() {
      const currentTheme = localStorage.getItem('chatTheme') || 'light';
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      const themes = {
        light: 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)',
        dark: 'linear-gradient(135deg, #2c3e50 0%, #34495e 100%)'
      };
      
      const chatArea = document.getElementById('chatArea');
      if (chatArea) {
        chatArea.style.background = themes[newTheme];
        localStorage.setItem('chatTheme', newTheme);
      }
    };
    
    window.applyChatTheme = function(theme) {
      const themes = {
        default: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        dark: 'linear-gradient(135deg, #2c3e50 0%, #34495e 100%)',
        ocean: 'linear-gradient(135deg, #0077be 0%, #00a8cc 100%)',
        sunset: 'linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%)',
        forest: 'linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%)',
        purple: 'linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%)',
        pink: 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)',
        red: 'linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%)',
        gold: 'linear-gradient(135deg, #f7971e 0%, #ffd200 100%)',
        mint: 'linear-gradient(135deg, #00b09b 0%, #96c93d 100%)',
        cosmic: 'linear-gradient(135deg, #4c1d95 0%, #7c3aed 50%, #a855f7 100%)',
        ice: 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)',
        neon: 'linear-gradient(135deg, #fd79a8 0%, #fdcb6e 50%, #6c5ce7 100%)',
        emerald: 'linear-gradient(135deg, #00b894 0%, #00cec9 100%)',
        lavender: 'linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%)',
        coral: 'linear-gradient(135deg, #fd79a8 0%, #e84393 100%)',
        midnight: 'linear-gradient(135deg, #2d3436 0%, #636e72 100%)',
        aurora: 'linear-gradient(135deg, #00b894 0%, #00cec9 50%, #74b9ff 100%)'
      };
      
      const chatArea = document.getElementById('chatArea');
      
      if (chatArea) {
        chatArea.style.background = themes[theme] || themes.default;
        localStorage.setItem('chatTheme', theme);
        
        // Add smooth transition
        chatArea.style.transition = 'background 0.5s ease-in-out';
        
        // Show notification
        const notification = document.createElement('div');
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: rgba(0, 0, 0, 0.8);
          color: white;
          padding: 12px 20px;
          border-radius: 8px;
          font-size: 14px;
          font-weight: 600;
          z-index: 10000;
          animation: slideIn 0.3s ease-out;
        `;
        notification.textContent = `üé® ${theme.charAt(0).toUpperCase() + theme.slice(1)} theme applied!`;
        
        const style = document.createElement('style');
        style.textContent = `
          @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
          style.remove();
        }, 2000);
      }
      
      closeChatThemes();
    };
    
    // Load saved theme on page load
    window.loadSavedChatTheme = function() {
      const savedTheme = localStorage.getItem('chatTheme');
      if (savedTheme) {
        applyChatTheme(savedTheme);
      }
    };
    
    async function saveProfile(e) {
      e.preventDefault();
      
      const btn = e.target.querySelector('button[type="submit"]');
      btn.disabled = true;
      btn.textContent = 'Saving...';
      
      try {
        const username = document.getElementById('editUsername').value.trim();
        const fullName = document.getElementById('editFullname').value.trim();
        const bio = document.getElementById('editBio').value.trim();
        const avatarUrl = document.getElementById('editAvatar').value.trim();
        
        if (!username) {
          alert('Username is required');
          return;
        }
        
        // Check if username is already taken by another user
        const { data: existingUser } = await window.sb
          .from('profiles')
          .select('*')
          .eq('username', username)
          .neq('id', window.currentUser.id)
          .maybeSingle();
        
        if (existingUser) {
          alert('Username is already taken');
          return;
        }
        
        // Update profile
        const { error } = await window.sb
          .from('profiles')
          .upsert({
            id: window.currentUser.id,
            username: username,
            full_name: fullName,
            bio: bio,
            avatar_url: avatarUrl,
            updated_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        alert('Profile updated successfully!');
        closeEditProfile();
        loadProfileInfo();
        
        // Reload stories to show updated profile picture
        if (window.loadStories) {
          await window.loadStories();
        }
        
      } catch (error) {
        console.error('Error updating profile:', error);
        alert('Failed to update profile: ' + error.message);
      } finally {
        btn.disabled = false;
        btn.textContent = 'Save Changes';
      }
    }
    
    async function accountPrivacy() {
      closeModal('settingsModal');
      
      try {
        const { data: profile } = await window.sb
          .from('profiles')
          .select('is_private')
          .eq('id', window.currentUser.id)
          .single();
        
        const isPrivate = profile?.is_private || false;
        const newPrivacy = !isPrivate;
        
        const { error } = await window.sb
          .from('profiles')
          .update({ is_private: newPrivacy })
          .eq('id', window.currentUser.id);
        
        if (error) throw error;
        
        alert(`Account is now ${newPrivacy ? 'Private' : 'Public'}`);
        
      } catch (error) {
        console.error('Error updating privacy:', error);
        alert('Failed to update privacy settings');
      }
    }
    
    async function viewBlockedAccounts() {
      closeModal('settingsModal');
      
      try {
        const { data: blockedUsers, error } = await window.sb
          .from('blocked_users')
          .select('*')
          .eq('blocker_id', window.currentUser.id);
        
        if (error) throw error;
        
        // Get profiles separately
        const profilePromises = blockedUsers?.map(async (blocked) => {
          const { data: profile } = await window.sb
            .from('profiles')
            .select('username, avatar_url')
            .eq('id', blocked.blocked_id)
            .single();
          return { ...blocked, profiles: profile };
        }) || [];
        
        const blockedUsersWithProfiles = await Promise.all(profilePromises);
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'blockedUsersModal';
        
        let html = '<div class="modal-backdrop" onclick="closeBlockedUsers()"></div><div class="modal-dialog"><div class="modal-header"><h3>Blocked Accounts</h3><button class="close-btn" onclick="closeBlockedUsers()">&times;</button></div><div class="modal-body">';
        
        if (blockedUsersWithProfiles?.length) {
          blockedUsersWithProfiles.forEach(blocked => {
            html += `
              <div class="user-item">
                <div class="user-avatar">
                  ${blocked.profiles?.avatar_url ? `<img src="${blocked.profiles.avatar_url}" alt="${blocked.profiles.username}" />` : blocked.profiles?.username?.[0]?.toUpperCase()}
                </div>
                <div class="user-info">
                  <div class="user-name">${blocked.profiles?.username || 'Unknown'}</div>
                </div>
                <button class="btn btn-primary" onclick="unblockUser('${blocked.blocked_id}')">Unblock</button>
              </div>
            `;
          });
        } else {
          html += '<div class="no-content">No blocked accounts</div>';
        }
        
        html += '</div></div>';
        modal.innerHTML = html;
        document.body.appendChild(modal);
        openModal('blockedUsersModal');
        
      } catch (error) {
        console.error('Error loading blocked users:', error);
        alert('Failed to load blocked accounts');
      }
    }
    
    async function unblockUser(userId) {
      try {
        const { error } = await window.sb
          .from('blocked_users')
          .delete()
          .eq('blocker_id', window.currentUser.id)
          .eq('blocked_id', userId);
        
        if (error) throw error;
        
        alert('User unblocked!');
        closeBlockedUsers();
        
      } catch (error) {
        console.error('Error unblocking user:', error);
        alert('Failed to unblock user');
      }
    }
    
    function closeBlockedUsers() {
      const modal = document.getElementById('blockedUsersModal');
      if (modal) {
        closeModal('blockedUsersModal');
        modal.remove();
      }
    }
    
    function notificationSettings() {
      closeModal('settingsModal');
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.id = 'notificationModal';
      modal.innerHTML = `
        <div class="modal-backdrop" onclick="closeNotificationSettings()"></div>
        <div class="modal-dialog">
          <div class="modal-header">
            <h3>Notification Settings</h3>
            <button class="close-btn" onclick="closeNotificationSettings()">&times;</button>
          </div>
          <div class="modal-body">
            <div class="settings-item">
              <h4>Push Notifications</h4>
              <label><input type="checkbox" id="pushNotifs" checked> Enable push notifications</label>
            </div>
            <div class="settings-item">
              <h4>Email Notifications</h4>
              <label><input type="checkbox" id="emailNotifs" checked> Enable email notifications</label>
            </div>
            <div class="settings-item">
              <h4>Message Notifications</h4>
              <label><input type="checkbox" id="messageNotifs" checked> New message notifications</label>
            </div>
          </div>
          <div class="modal-actions">
            <button onclick="closeNotificationSettings()" class="cancel-btn">Cancel</button>
            <button onclick="saveNotificationSettings()" class="save-btn">Save</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
      openModal('notificationModal');
    }
    
    function saveNotificationSettings() {
      const pushNotifs = document.getElementById('pushNotifs').checked;
      const emailNotifs = document.getElementById('emailNotifs').checked;
      const messageNotifs = document.getElementById('messageNotifs').checked;
      
      localStorage.setItem('notificationSettings', JSON.stringify({
        push: pushNotifs,
        email: emailNotifs,
        messages: messageNotifs
      }));
      
      alert('Notification settings saved!');
      closeNotificationSettings();
    }
    
    function closeNotificationSettings() {
      const modal = document.getElementById('notificationModal');
      if (modal) {
        closeModal('notificationModal');
        modal.remove();
      }
    }
    
    async function dataDownload() {
      closeModal('settingsModal');
      
      if (!confirm('Download all your data? This may take a moment.')) return;
      
      try {
        // Get user data
        const { data: profile } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', window.currentUser.id)
          .single();
        
        const { data: posts } = await window.sb
          .from('posts')
          .select('*')
          .eq('user_id', window.currentUser.id);
        
        const { data: messages } = await window.sb
          .from('messages')
          .select('*')
          .or(`sender_id.eq.${window.currentUser.id},receiver_id.eq.${window.currentUser.id}`);
        
        const userData = {
          profile,
          posts: posts || [],
          messages: messages || [],
          exportDate: new Date().toISOString()
        };
        
        // Create and download file
        const blob = new Blob([JSON.stringify(userData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${profile?.username || 'user'}_data_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        alert('Data downloaded successfully!');
        
      } catch (error) {
        console.error('Error downloading data:', error);
        alert('Failed to download data');
      }
    }
    
    async function logout() {
      if (!confirm('Are you sure you want to logout?')) return;
      
      try {
        console.log('Logging out...');
        
        const { error } = await window.sb.auth.signOut();
        if (error) {
          console.error('Logout error:', error);
          throw error;
        }
        
        console.log('Logout successful');
        window.currentUser = null;
        
        // Clear all cached data including follow status
        localStorage.removeItem('chatLockPassword');
        localStorage.removeItem('chatLockEnabled');
        localStorage.removeItem('followedUsers');
        localStorage.removeItem('savedChats');
        
        showLoginUI();
        
      } catch (error) {
        console.error('Logout failed:', error);
        alert('Failed to logout: ' + error.message);
      }
    }
    
    // Profile display functions
    async function loadProfileInfo() {
      if (!window.currentUser) return;
      
      try {
        // Get user profile
        const { data: profile } = await window.sb
          .from('profiles')
          .select('*')
          .eq('id', window.currentUser.id)
          .single();
        
        // Get posts count
        const { count: postsCount } = await window.sb
          .from('posts')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', window.currentUser.id);
        
        // Get followers count
        const { count: followersCount } = await window.sb
          .from('follows')
          .select('*', { count: 'exact', head: true })
          .eq('followee_id', window.currentUser.id);
        
        // Get following count
        const { count: followingCount } = await window.sb
          .from('follows')
          .select('*', { count: 'exact', head: true })
          .eq('follower_id', window.currentUser.id);
        
        // Update profile display
        if (profile) {
          document.getElementById('profileUsername').textContent = profile.username || 'username';
          document.getElementById('profileFullname').textContent = profile.full_name || '';
          document.getElementById('profileBio').textContent = profile.bio || '';
          
          // Update avatar
          const avatarEl = document.getElementById('profileAvatar');
          const profileInitial = document.getElementById('profileInitial');
          
          if (profile.avatar_url && profile.avatar_url.trim() && profile.avatar_url !== 'null') {
            avatarEl.innerHTML = `<img src="${profile.avatar_url}" alt="${profile.username}" style="width:100%;height:100%;object-fit:cover;border-radius:50%;" onerror="this.style.display='none'; document.getElementById('profileInitial').style.display='flex'; document.getElementById('profileInitial').textContent='${(profile.username || 'U')[0].toUpperCase()}';" />`;
            if (profileInitial) profileInitial.style.display = 'none';
          } else {
            avatarEl.innerHTML = `<span id="profileInitial" style="font-size: 3rem; font-weight: 600; color: #ffffff; display: flex; align-items: center; justify-content: center;">${(profile.username || 'U')[0].toUpperCase()}</span>`;
          }
          
          // Update links
          const linksEl = document.getElementById('profileLinks');
          if (profile.links) {
            const links = profile.links.split('\n').filter(link => link.trim());
            linksEl.innerHTML = links.map(link => `<a href="${link}" target="_blank">${link}</a>`).join('<br>');
          } else {
            linksEl.innerHTML = '';
          }
        }
        
        // Update stats
        document.getElementById('postsCount').textContent = postsCount || 0;
        document.getElementById('followersCount').textContent = followersCount || 0;
        document.getElementById('followingCount').textContent = followingCount || 0;
        
      } catch (error) {
        console.error('Error loading profile:', error);
      }
    }
    
    function showPosts() {
      showProfileTab('posts');
    }
    
    function showFollowers() {
      console.log('Show followers');
      // Implement followers modal
    }
    
    function showFollowing() {
      console.log('Show following');
      // Implement following modal
    }
    
    // Load feed posts for home page (including all content)
    async function loadFeed() {
      try {
        // Get all posts (including reels/videos)
        const { data: posts, error } = await window.sb
          .from('posts')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(20);
        
        if (error) throw error;
        
        const feedContainer = document.getElementById('feed');
        if (!feedContainer) return;
        
        let html = '';
        
        if (posts?.length) {
          // Get user profiles for each post
          for (const post of posts) {
            // Include all content types in home feed
            const isVideo = post.image_url && (post.image_url.includes('video') || post.image_url.startsWith('data:video'));
            
            let user = null;
            try {
              const { data: profile } = await window.sb
                .from('profiles')
                .select('username, avatar_url, full_name')
                .eq('id', post.user_id)
                .single();
              user = profile;
            } catch (err) {
              console.log('Profile not found for user:', post.user_id);
            }
            
            // Get likes and saved status for this post
            let likesCount = 0;
            let isLiked = false;
            let isSaved = false;
            
            try {
              const { count } = await window.sb
                .from('likes')
                .select('*', { count: 'exact', head: true })
                .eq('post_id', post.id);
              likesCount = count || 0;
              
              if (window.currentUser) {
                const { data: userLike } = await window.sb
                  .from('likes')
                  .select('id')
                  .eq('post_id', post.id)
                  .eq('user_id', window.currentUser.id)
                  .single();
                isLiked = !!userLike;
                
                const { data: userSave } = await window.sb
                  .from('saved_posts')
                  .select('id')
                  .eq('post_id', post.id)
                  .eq('user_id', window.currentUser.id)
                  .single();
                isSaved = !!userSave;
              }
            } catch (err) {
              console.log('Error getting post stats:', err);
            }
            
            // Remove fake views - we'll only show likes
            
            html += `
              <div class="post">
                <div class="post-header">
                  <div class="post-avatar" style="position: relative; width: 32px; height: 32px; border-radius: 50%; background: #e1306c; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                    ${user?.avatar_url && user.avatar_url.trim() && user.avatar_url !== 'null' ? 
                      `<img src="${user.avatar_url}" alt="${user.username}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />` : 
                      ''
                    }
                    <span style="color: white; font-weight: 600; font-size: 0.9rem; ${user?.avatar_url && user.avatar_url.trim() && user.avatar_url !== 'null' ? 'display:none;' : 'display:flex;'}">${user?.username?.[0]?.toUpperCase() || 'U'}</span>
                  </div>
                  <div class="post-username">${user?.username || 'User'}</div>
                  <div style="position: relative;">
                    <button class="post-more" onclick="togglePostMenu(event, '${post.user_id}', '${user?.username || 'User'}', '${post.id}')"></button>
                    <div class="post-menu" id="menu-${post.id}">
                      <button class="post-menu-item" data-icon="üë§" onclick="event.stopPropagation(); openEnhancedUserProfile('${post.user_id}', '${user?.username || 'User'}'); hidePostMenu('${post.id}');">
                        <span>üë§</span> Visit Profile
                      </button>
                      <button class="post-menu-item" data-icon="‚ûï" onclick="event.stopPropagation(); followUser('${post.user_id}'); hidePostMenu('${post.id}');">
                        <span>‚ûï</span> Follow
                      </button>
                      <button class="post-menu-item" data-icon="üí¨" onclick="event.stopPropagation(); openChat('${post.user_id}', '${user?.username || 'User'}'); hidePostMenu('${post.id}'); showSection('messages');">
                        <span>üí¨</span> Message
                      </button>
                    </div>
                  </div>
                </div>
                ${post.image_url ? (isVideo ? `<video src="${post.image_url}" controls class="post-image" style="width: 100%; max-height: 600px; object-fit: cover;" />` : `<img src="${post.image_url}" alt="Post" class="post-image" style="width: 100%; max-height: 600px; object-fit: cover;" />`) : ''}
                <div class="post-actions">
                  <div class="post-actions-left">
                    <button class="post-action like-btn ${isLiked ? 'liked' : ''}" onclick="toggleLike('${post.id}')" data-post-id="${post.id}" title="Like">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="${isLiked ? '#ff3040' : 'none'}" stroke="${isLiked ? '#ff3040' : '#ffffff'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                      </svg>
                    </button>
                    <button class="post-action" onclick="showComments('${post.id}')" title="Comment">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
                      </svg>
                    </button>
                    <button class="post-action" onclick="sharePost('${post.id}')" title="Share">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                        <polyline points="16,6 12,2 8,6"/>
                        <line x1="12" y1="2" x2="12" y2="15"/>
                      </svg>
                    </button>
                  </div>
                  <div class="post-actions-right">
                    <button class="post-action save-btn ${isSaved ? 'saved' : ''}" onclick="toggleSave('${post.id}')" data-post-id="${post.id}" title="Save">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="${isSaved ? '#ffd700' : 'none'}" stroke="${isSaved ? '#ffd700' : '#ffffff'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"/>
                      </svg>
                    </button>
                  </div>
                </div>
                <div class="post-stats">
                  <div class="post-likes" id="likes-${post.id}" onclick="showLikes('${post.id}')">${likesCount} ${likesCount === 1 ? 'like' : 'likes'}</div>
                </div>
                ${post.caption ? `<div class="post-caption"><strong>${user?.username || 'User'}</strong> ${post.caption}</div>` : ''}
                <div class="post-timestamp">${formatTime(post.created_at)}</div>
              </div>
            `;
          }
        } else {
          html = '<div class="no-content">No posts yet. Create your first post!</div>';
        }
        
        feedContainer.innerHTML = html;
        
      } catch (error) {
        console.error('Error loading feed:', error);
        const feedContainer = document.getElementById('feed');
        if (feedContainer) {
          feedContainer.innerHTML = '<div class="no-content">Error loading posts. Please try again.</div>';
        }
      }
    }
    
    // Logout function
    async function logout() {
      if (!confirm('Are you sure you want to logout?')) return;
      
      try {
        console.log('Logging out...');
        
        const { error } = await window.sb.auth.signOut();
        if (error) {
          console.error('Logout error:', error);
          throw error;
        }
        
        console.log('Logout successful');
        window.currentUser = null;
        
        // Clear all cached data
        localStorage.removeItem('chatLockPassword');
        localStorage.removeItem('chatLockEnabled');
        localStorage.removeItem('followedUsers');
        localStorage.removeItem('savedChats');
        
        // Redirect to auth page
        window.location.href = 'auth.html';
        
      } catch (error) {
        console.error('Logout failed:', error);
        alert('Failed to logout: ' + error.message);
      }
    }
    
    // Initialize app when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, checking authentication...');
      
      // Wait a bit for Supabase to load, then check auth
      setTimeout(initializeApp, 1000);
    });
    
    // Set up auth state listener
    function setupAuthListener() {
      if (!window.sb) return;
      
      window.sb.auth.onAuthStateChange(async (event, session) => {
        console.log('Auth state changed:', event);
        
        if (event === 'SIGNED_OUT') {
          console.log('User signed out, redirecting to auth');
          window.location.href = 'auth.html';
        }
      });
    }
      
      // Set up auth listener
      setupAuthListener();
      
      // Additional form setup
      document.getElementById('messageForm')?.addEventListener('submit', sendMessage);
      
      // Add search functionality with improved behavior
      const searchInput = document.getElementById('searchQuery');
      if (searchInput) {
        let searchTimeout;
        
        // Search on input with debounce
        searchInput.addEventListener('input', (e) => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            searchUsers(e.target.value);
          }, 300);
        });
        
        // Also search on Enter key press
        searchInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            clearTimeout(searchTimeout);
            searchUsers(e.target.value);
          }
        });
        
        // Load all users when search input is focused and empty
        searchInput.addEventListener('focus', (e) => {
          if (!e.target.value.trim()) {
            loadAllUsers();
          }
        });
      }
      
      // Add navigation listeners
      document.querySelectorAll('.nav-btn[data-section]').forEach(btn => {
        btn.addEventListener('click', () => {
          showSection(btn.dataset.section);
        });
      });
      
      // Format date function for message grouping
      window.formatDate = function(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const messageDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        const diffTime = today - messageDate;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) return 'Today';
        if (diffDays === 1) return 'Yesterday';
        if (diffDays < 7) return date.toLocaleDateString('en-US', { weekday: 'long' });
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      };
      
      // Refresh messages function
      window.refreshMessages = async function() {
        const refreshBtn = document.getElementById('refreshMessages');
        if (refreshBtn) {
          refreshBtn.style.transform = 'rotate(360deg)';
          refreshBtn.style.transition = 'transform 0.5s';
          setTimeout(() => {
            refreshBtn.style.transform = 'rotate(0deg)';
          }, 500);
        }
        await window.loadChats();
      };
      
      // Load chats - Instagram style with last message preview
      window.loadChats = async function() {
        if (!window.currentUser) return;
        
        try {
          console.log('Loading chats for user:', window.currentUser.id);
          
          // Get blocked users to exclude them
          const { data: blockedUsers } = await window.sb
            .from('blocked_users')
            .select('blocked_id')
            .eq('blocker_id', window.currentUser.id);
          
          const blockedUserIds = blockedUsers?.map(b => b.blocked_id) || [];
          console.log('Blocked users:', blockedUserIds);
          
          // Get hidden chats to exclude them
          const hiddenChats = JSON.parse(localStorage.getItem('hiddenChats') || '[]');
          console.log('Hidden chats:', hiddenChats);
          
          // Get followed users with their profiles
          let following = [];
          let followError = null;
          
          if (blockedUserIds.length > 0) {
            const result = await window.sb
              .from('follows')
              .select(`
                followee_id,
                profiles:followee_id (username, avatar_url, full_name)
              `)
              .eq('follower_id', window.currentUser.id)
              .not('followee_id', 'in', `(${blockedUserIds.join(',')})`);
            following = result.data;
            followError = result.error;
          } else {
            const result = await window.sb
              .from('follows')
              .select(`
                followee_id,
                profiles:followee_id (username, avatar_url, full_name)
              `)
              .eq('follower_id', window.currentUser.id);
            following = result.data;
            followError = result.error;
          }
          
          if (followError) {
            console.error('Error fetching follows:', followError);
          }
          
          console.log('Following users:', following);
          
          // Get saved chats from localStorage
          const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
          console.log('Saved chats:', savedChats);
          
          // Get users who have exchanged messages
          const { data: messageUsers, error: msgError } = await window.sb
            .from('messages')
            .select('sender_id, receiver_id')
            .or(`sender_id.eq.${window.currentUser.id},receiver_id.eq.${window.currentUser.id}`)
            ;
          
          if (msgError) {
            console.error('Error fetching message users:', msgError);
          }
          
          console.log('Message users:', messageUsers);
          
          // Combine all user IDs and profiles
          const allUserIds = new Set();
          const userProfiles = new Map();
          
          // Add followed users first (priority)
          if (following?.length) {
            following.forEach(follow => {
              if (follow.profiles) {
                allUserIds.add(follow.followee_id);
                userProfiles.set(follow.followee_id, follow.profiles);
              }
            });
          }
          
          // Add saved chat users
          if (savedChats?.length) {
            for (const savedChat of savedChats) {
              allUserIds.add(savedChat.partnerId);
              if (!userProfiles.has(savedChat.partnerId)) {
                try {
                  const { data: profile } = await window.sb
                    .from('profiles')
                    .select('username, avatar_url, full_name, is_disabled')
                    .eq('id', savedChat.partnerId)
                    .single();
                  if (profile && !profile.is_disabled) {
                    userProfiles.set(savedChat.partnerId, profile);
                  }
                } catch (err) {
                  console.log('Profile not found for saved chat user:', savedChat.partnerId);
                }
              }
            }
          }
          
          // Add message users
          if (messageUsers?.length) {
            const uniqueMessageUserIds = new Set();
            messageUsers.forEach(msg => {
              const otherUserId = msg.sender_id === window.currentUser.id ? msg.receiver_id : msg.sender_id;
              if (otherUserId !== window.currentUser.id) {
                uniqueMessageUserIds.add(otherUserId);
              }
            });
            
            // Get profiles for message users not already loaded
            for (const userId of uniqueMessageUserIds) {
              allUserIds.add(userId);
              if (!userProfiles.has(userId)) {
                try {
                  const { data: profile } = await window.sb
                    .from('profiles')
                    .select('username, avatar_url, full_name, is_disabled')
                    .eq('id', userId)
                    .single();
                  if (profile && !profile.is_disabled) {
                    userProfiles.set(userId, profile);
                  }
                } catch (err) {
                  console.log('Profile not found for user:', userId);
                }
              }
            }
          }
          
          console.log('All user IDs:', Array.from(allUserIds));
          console.log('User profiles:', userProfiles);
          
          const chatsList = document.getElementById('chatsList');
          if (!chatsList) return;
          
          let html = '';
          
          if (allUserIds.size > 0) {
            // Sort users: saved chats first, then followed users, then others
            const sortedUsers = Array.from(allUserIds).sort((a, b) => {
              const aIsSaved = savedChats.some(chat => chat.partnerId === a);
              const bIsSaved = savedChats.some(chat => chat.partnerId === b);
              const aIsFollowed = following?.some(f => f.followee_id === a);
              const bIsFollowed = following?.some(f => f.followee_id === b);
              
              // Saved chats first
              if (aIsSaved && !bIsSaved) return -1;
              if (!aIsSaved && bIsSaved) return 1;
              
              // Then followed users
              if (aIsFollowed && !bIsFollowed) return -1;
              if (!aIsFollowed && bIsFollowed) return 1;
              
              return 0;
            });
            
            // Generate HTML for each user (excluding blocked and hidden users)
            for (const userId of sortedUsers) {
              // Skip blocked users and hidden chats
              if (blockedUserIds.includes(userId) || hiddenChats.includes(userId)) {
                continue;
              }
              
              const user = userProfiles.get(userId);
              if (!user) continue;
              
              let lastMessage = null;
              let messageTime = '';
              
              try {
                const { data: messages } = await window.sb
                  .from('messages')
                  .select('content, created_at, sender_id')
                  .or(`and(sender_id.eq.${window.currentUser.id},receiver_id.eq.${userId}),and(sender_id.eq.${userId},receiver_id.eq.${window.currentUser.id})`)
                  
                  .order('created_at', { ascending: false })
                  .limit(1);
                
                if (messages?.length) {
                  lastMessage = messages[0];
                  messageTime = formatTime(lastMessage.created_at);
                }
              } catch (err) {
                console.log('Error getting last message for user:', userId, err);
              }
              
              const isOnline = Math.random() > 0.5;
              const isFollowed = following?.some(f => f.followee_id === userId);
              const isSaved = savedChats.some(chat => chat.partnerId === userId);
              
              html += `
                <div class="chat-item" onclick="window.openChat('${userId}', '${user.username || 'User'}')" style="cursor: pointer;">
                  <div class="chat-avatar-container">
                    <div class="chat-avatar">
                      ${user.avatar_url && user.avatar_url.trim() && user.avatar_url !== 'null' ? 
                        `<img src="${user.avatar_url}" alt="${user.username}" />` : 
                        `<div class="avatar-placeholder">${user.username?.[0]?.toUpperCase() || 'U'}</div>`
                      }
                    </div>
                    ${isOnline ? '<div class="online-indicator"></div>' : ''}
                    ${isSaved ? '<div class="save-indicator" style="position: absolute; bottom: -2px; left: -2px; background: #ffd700; color: black; border-radius: 50%; width: 16px; height: 16px; display: flex; align-items: center; justify-content: center; font-size: 10px; border: 2px solid #000;">üíæ</div>' : ''}
                    ${isFollowed ? '<div class="follow-indicator" style="position: absolute; bottom: -2px; right: -2px; background: #0095f6; color: white; border-radius: 50%; width: 16px; height: 16px; display: flex; align-items: center; justify-content: center; font-size: 10px; border: 2px solid #000;">‚úì</div>' : ''}
                  </div>
                  <div class="chat-info">
                    <div class="chat-header">
                      <div class="chat-name">${user.username || 'User'}</div>
                      <div class="chat-time">${messageTime}</div>
                    </div>
                    <div class="chat-preview">
                      ${lastMessage ? 
                        (lastMessage.sender_id === window.currentUser.id ? 'You: ' : '') + 
                        (lastMessage.content?.length > 30 ? lastMessage.content.substring(0, 30) + '...' : lastMessage.content || 'Media') 
                        : 'Tap to start chatting'
                      }
                    </div>
                  </div>
                </div>
              `;
            }
          } else {
            html = `
              <div class="empty-chats">
                <div class="empty-icon">üí¨</div>
                <h3>Your Messages</h3>
                <p>Follow people to start messaging them</p>
                <button class="btn btn-primary" onclick="showSection('search')">Find People</button>
              </div>
            `;
          }
          
          chatsList.innerHTML = html;
          console.log('Chats loaded successfully');
          
        } catch (error) {
          console.error('Error loading chats:', error);
          const chatsList = document.getElementById('chatsList');
          if (chatsList) {
            chatsList.innerHTML = `
              <div class="empty-chats">
                <div class="empty-icon">‚ö†Ô∏è</div>
                <h3>Error Loading Chats</h3>
                <p>Please try again later</p>
                <button class="btn btn-secondary" onclick="refreshMessages()">Retry</button>
              </div>
            `;
          }
        }
      };
      
      // Add back button listener with save/delete options
      document.getElementById('backToChats')?.addEventListener('click', () => {
        if (window.currentChat) {
          window.showChatOptionsModal();
        } else {
          document.getElementById('chatArea').classList.add('hidden');
          document.getElementById('chatsList').style.display = 'block';
        }
      });
      
      // Chat options modal functions
      window.showChatOptionsModal = function() {
        const modal = document.createElement('div');
        modal.className = 'modal chat-options-modal';
        modal.id = 'chatOptionsModal';
        modal.innerHTML = `
          <div class="modal-backdrop" onclick="closeChatOptionsModal()"></div>
          <div class="modal-dialog" style="max-width: 300px; background: #262626; border-radius: 12px;">
            <div class="modal-header" style="padding: 1rem; border-bottom: 1px solid #3c3c3c; color: #fff;">
              <h3 style="margin: 0; font-size: 1.1rem;">Chat Options</h3>
            </div>
            <div class="modal-body" style="padding: 0;">
              <button onclick="saveChatAndClose()" style="width: 100%; padding: 1rem; border: none; background: none; color: #fff; text-align: left; cursor: pointer; border-bottom: 1px solid #3c3c3c; display: flex; align-items: center; gap: 0.75rem;">
                <span>üíæ</span>
                <span>Save Chat</span>
              </button>
              <button onclick="deleteChatAndClose()" style="width: 100%; padding: 1rem; border: none; background: none; color: #ff4757; text-align: left; cursor: pointer; border-bottom: 1px solid #3c3c3c; display: flex; align-items: center; gap: 0.75rem;">
                <span>üóëÔ∏è</span>
                <span>Delete This Chat</span>
              </button>
              <button onclick="deleteAllChatsFromModal()" style="width: 100%; padding: 1rem; border: none; background: none; color: #ff1744; text-align: left; cursor: pointer; border-bottom: 1px solid #3c3c3c; display: flex; align-items: center; gap: 0.75rem;">
                <span>üí•</span>
                <span>Delete ALL Chats</span>
              </button>
              <button onclick="justGoBack()" style="width: 100%; padding: 1rem; border: none; background: none; color: #8e8e8e; text-align: left; cursor: pointer; display: flex; align-items: center; gap: 0.75rem;">
                <span>‚¨ÖÔ∏è</span>
                <span>Just Go Back</span>
              </button>
              <button onclick="closeChatOptionsModal()" style="width: 100%; padding: 1rem; border: none; background: none; color: #8e8e8e; text-align: left; cursor: pointer; display: flex; align-items: center; gap: 0.75rem;">
                <span>‚ùå</span>
                <span>Cancel</span>
              </button>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
      };
      
      window.closeChatOptionsModal = function() {
        const modal = document.getElementById('chatOptionsModal');
        if (modal) {
          modal.remove();
        }
        // Reset body styles that might have been set by modal
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        // Just close the modal and go back to chat
        // Don't change the chat area state
      };
      
      window.justGoBack = function() {
        console.log('Just going back to chats list');
        window.closeChatOptionsModal();
        document.getElementById('chatArea').classList.add('hidden');
        document.getElementById('chatsList').style.display = 'block';
        window.currentChat = null;
      };
      
      window.saveChatAndClose = function() {
        console.log('Save chat clicked');
        if (!window.currentChat) {
          console.log('No current chat');
          return;
        }
        
        try {
          // Save to localStorage
          const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
          const existingIndex = savedChats.findIndex(chat => chat.partnerId === window.currentChat.partnerId);
          
          if (existingIndex === -1) {
            savedChats.push({
              partnerId: window.currentChat.partnerId,
              partnerName: window.currentChat.partnerName,
              savedAt: new Date().toISOString()
            });
            localStorage.setItem('savedChats', JSON.stringify(savedChats));
            console.log('Chat saved successfully');
            alert('Chat saved successfully!');
          } else {
            console.log('Chat already saved');
            alert('Chat is already saved!');
          }
          
          window.closeChatOptionsModal();
          document.getElementById('chatArea').classList.add('hidden');
          document.getElementById('chatsList').style.display = 'block';
          window.currentChat = null;
          if (window.loadChats) window.loadChats();
        } catch (error) {
          console.error('Error saving chat:', error);
          alert('Failed to save chat');
        }
      };
      
      window.deleteChatAndClose = async function() {
        console.log('Delete chat clicked');
        if (!window.currentChat) {
          console.log('No current chat');
          return;
        }
        
        if (!confirm('Delete all messages with this user? This action cannot be undone.')) return;
        
        try {
          console.log('Deleting messages for chat:', window.currentChat.partnerId);
          
          // Delete messages from database
          const { error } = await window.sb
            .from('messages')
            .delete()
            .or(`and(sender_id.eq.${window.currentUser.id},receiver_id.eq.${window.currentChat.partnerId}),and(sender_id.eq.${window.currentChat.partnerId},receiver_id.eq.${window.currentUser.id})`);
          
          if (error) {
            console.error('Database delete error:', error);
            throw error;
          }
          
          console.log('Messages deleted successfully');
          
          // Remove from saved chats
          const savedChats = JSON.parse(localStorage.getItem('savedChats') || '[]');
          const filtered = savedChats.filter(chat => chat.partnerId !== window.currentChat.partnerId);
          localStorage.setItem('savedChats', JSON.stringify(filtered));
          
          alert('Chat deleted successfully!');
          
          window.closeChatOptionsModal();
          document.getElementById('chatArea').classList.add('hidden');
          document.getElementById('chatsList').style.display = 'block';
          window.currentChat = null;
          if (window.loadChats) window.loadChats();
          
          console.log('Chat deleted successfully');
          
        } catch (error) {
          console.error('Error deleting chat:', error);
          alert('Failed to delete chat: ' + error.message);
        }
      };
      
      // Delete all chats from modal
      window.deleteAllChatsFromModal = async function() {
        window.closeChatOptionsModal();
        await window.deleteAllChats();
      };
      

      
      // Add modal close listeners with scroll prevention
      document.addEventListener('click', (e) => {
        if (e.target.matches('.close-btn, .cancel-btn')) {
          const modal = e.target.closest('.modal');
          if (modal) {
            modal.classList.add('hidden');
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.position = '';
            document.body.style.width = '';
          }
        }
        
        if (e.target.matches('.modal-backdrop')) {
          const modal = e.target.closest('.modal');
          if (modal) {
            modal.classList.add('hidden');
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.position = '';
            document.body.style.width = '';
          }
        }
      });
      
      // Add profile tab listeners
      document.querySelectorAll('.profile-tab').forEach(tab => {
        tab.addEventListener('click', () => {
          const tabName = tab.dataset.tab;
          if (tabName) showProfileTab(tabName);
        });
      });
      
      // Add settings button listener
      document.getElementById('openSettings')?.addEventListener('click', () => {
        openModal('settingsModal');
      });
      
      // Add edit profile form listeners
      document.getElementById('profilePicInput')?.addEventListener('change', handleProfilePicUpload);
      document.getElementById('editProfileForm')?.addEventListener('submit', handleEditProfileSubmit);
      
      // Bio character counter
      document.getElementById('edit_bio')?.addEventListener('input', (e) => {
        const count = e.target.value.length;
        const counter = document.getElementById('bioCount');
        if (counter) counter.textContent = count;
      });
      
      // Settings modal close listener
      document.getElementById('closeSettings')?.addEventListener('click', () => {
        closeModal('settingsModal');
      });
      
      // Add logout button listener
      document.getElementById('btn-logout')?.addEventListener('click', logout);
      
      // Add post form listener
      document.getElementById('createPostForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!window.currentUser) {
          alert('Please log in first');
          return;
        }
        
        const file = document.getElementById('postImage')?.files?.[0];
        const caption = document.getElementById('postCaption')?.value?.trim();
        
        if (!file) {
          alert('Please choose an image or video');
          return;
        }
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn?.textContent || 'Post';
        
        try {
          submitBtn.disabled = true;
          submitBtn.textContent = 'Uploading...';
          
          // Convert file to base64
          const reader = new FileReader();
          const base64Data = await new Promise((resolve, reject) => {
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });
          
          const postData = {
            user_id: window.currentUser.id,
            image_url: base64Data,
            caption: caption || '',
            audience: document.getElementById('postAudience')?.value || 'public'
          };
          
          const { error } = await window.sb.from('posts').insert(postData);
          if (error) throw error;
          
          // Close modal and reset form
          document.getElementById('createPostModal').classList.add('hidden');
          document.getElementById('createPostForm').reset();
          document.getElementById('postPreview').innerHTML = '';
          document.getElementById('mediaSelected').textContent = '';
          
          // Reload feed
          await loadFeed();
          
          alert('Post created successfully!');
          
        } catch (error) {
          console.error('Post creation failed:', error);
          alert('Failed to create post: ' + error.message);
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      });
      
      // Add story form listener
      document.getElementById('createStoryForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!window.currentUser) {
          alert('Please log in first');
          return;
        }
        
        const file = document.getElementById('storyMedia')?.files?.[0];
        if (!file) {
          alert('Please choose a media file for your story');
          return;
        }
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn?.textContent || 'Share Story';
        
        try {
          submitBtn.disabled = true;
          submitBtn.textContent = 'Uploading...';
          
          // Convert file to base64
          const reader = new FileReader();
          const base64Data = await new Promise((resolve, reject) => {
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });
          
          const duration = parseInt(document.getElementById('storyDuration')?.value || '24');
          const expiresAt = new Date();
          expiresAt.setHours(expiresAt.getHours() + duration);
          
          const storyData = {
            user_id: window.currentUser.id,
            media_url: base64Data,
            media_type: file.type.startsWith('video/') ? 'video' : 'image',
            audience: document.getElementById('storyAudience')?.value || 'public',
            expires_at: expiresAt.toISOString()
          };
          
          const { error } = await window.sb.from('stories').insert(storyData);
          if (error) throw error;
          
          // Close modal and reset form
          document.getElementById('createStoryModal').classList.add('hidden');
          document.getElementById('createStoryForm').reset();
          document.getElementById('storyPreview').innerHTML = '';
          document.getElementById('storyMediaSelected').textContent = '';
          
          // Stories removed
          
          alert('Story shared successfully!');
          
        } catch (error) {
          console.error('Story creation failed:', error);
          alert('Failed to share story: ' + error.message);
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      });
      
      // Add reel form listener
      document.getElementById('createReelForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!window.currentUser) {
          alert('Please log in first');
          return;
        }
        
        const file = document.getElementById('reelVideo')?.files?.[0];
        if (!file) {
          alert('Please choose a video file for your reel');
          return;
        }
        
        if (!file.type.startsWith('video/')) {
          alert('Please select a video file');
          return;
        }
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn?.textContent || 'Share Reel';
        
        try {
          submitBtn.disabled = true;
          submitBtn.textContent = 'Uploading...';
          
          // Convert file to base64
          const reader = new FileReader();
          const base64Data = await new Promise((resolve, reject) => {
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });
          
          const caption = document.getElementById('reelCaption')?.value?.trim();
          
          const reelData = {
            user_id: window.currentUser.id,
            image_url: base64Data,
            caption: caption || '',
            media_type: 'video',
            audience: document.getElementById('reelAudience')?.value || 'public'
          };
          
          const { error } = await window.sb.from('posts').insert(reelData);
          if (error) throw error;
          
          // Close modal and reset form
          document.getElementById('createReelModal').classList.add('hidden');
          document.getElementById('createReelForm').reset();
          document.getElementById('reelPreview').innerHTML = '';
          document.getElementById('reelVideoSelected').textContent = '';
          
          // Reload content
          if (window.showSection) window.showSection('reels');
          if (window.loadReels) await window.loadReels();
          if (window.loadFeed) await window.loadFeed();
          
          alert('Reel shared successfully!');
          
        } catch (error) {
          console.error('Reel creation failed:', error);
          alert('Failed to share reel: ' + error.message);
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        }
      });
      
      console.log('‚úÖ App initialization complete');
    });
  </script>
</body>
</html>